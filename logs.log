2024-06-04 20:36:17,986:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:36:17,986:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:36:17,986:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:36:17,986:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:36:19,339:INFO:Initializing load_model()
2024-06-04 20:36:19,339:INFO:load_model(model_name=..\Model\modelo_navegacao_otimizado.pkl, platform=None, authentication=None, verbose=True)
2024-06-04 20:36:38,333:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:36:38,333:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:36:38,333:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:36:38,333:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:36:38,521:INFO:Initializing load_model()
2024-06-04 20:36:38,521:INFO:load_model(model_name=\Model\modelo_navegacao_otimizado.pkl, platform=None, authentication=None, verbose=True)
2024-06-04 20:37:00,221:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:37:00,221:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:37:00,221:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:37:00,222:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:37:00,441:INFO:Initializing load_model()
2024-06-04 20:37:00,441:INFO:load_model(model_name=Model\modelo_navegacao_otimizado.pkl, platform=None, authentication=None, verbose=True)
2024-06-04 20:37:11,099:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:37:11,100:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:37:11,100:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:37:11,100:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:37:11,276:INFO:Initializing load_model()
2024-06-04 20:37:11,276:INFO:load_model(model_name=C:\Users\pytho\Documents\GitHub\GlobalSolutionFiap\Model\modelo_navegacao_otimizado.pkl, platform=None, authentication=None, verbose=True)
2024-06-04 20:37:55,211:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:37:55,211:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:37:55,211:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:37:55,211:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:37:55,382:INFO:Initializing load_model()
2024-06-04 20:37:55,382:INFO:load_model(model_name=API\modelo_navegacao_otimizado.pkl, platform=None, authentication=None, verbose=True)
2024-06-04 20:38:14,340:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:38:14,340:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:38:14,340:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:38:14,340:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:38:14,503:INFO:Initializing load_model()
2024-06-04 20:38:14,503:INFO:load_model(model_name=API\modelo_navegacao_otimizado.pkl, platform=None, authentication=None, verbose=True)
2024-06-04 20:38:58,215:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:38:58,216:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:38:58,216:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:38:58,216:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:38:58,392:INFO:Initializing load_model()
2024-06-04 20:38:58,392:INFO:load_model(model_name=C:\Users\pytho\Documents\GitHub\GlobalSolutionFiap\API\modelo_navegacao_otimizado.pkll, platform=None, authentication=None, verbose=True)
2024-06-04 20:39:36,027:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:39:36,027:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:39:36,027:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:39:36,027:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:39:36,204:INFO:Initializing load_model()
2024-06-04 20:39:36,204:INFO:load_model(model_name=C:\Users\pytho\Documents\GitHub\GlobalSolutionFiap\API\modelo_navegacao_otimizado.pkl, platform=None, authentication=None, verbose=True)
2024-06-04 20:40:01,173:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:40:01,173:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:40:01,174:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:40:01,174:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:40:01,454:INFO:Initializing load_model()
2024-06-04 20:40:01,454:INFO:load_model(model_name=modelo_navegacao_otimizado.pkl, platform=None, authentication=None, verbose=True)
2024-06-04 20:40:15,051:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:40:15,051:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:40:15,051:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:40:15,051:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:40:15,222:INFO:Initializing load_model()
2024-06-04 20:40:15,222:INFO:load_model(model_name=modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-04 20:41:10,108:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:41:10,108:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:41:10,108:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:41:10,108:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:41:10,288:INFO:Initializing load_model()
2024-06-04 20:41:10,288:INFO:load_model(model_name=API\modelo_navegacao_otimizado.pkl, platform=None, authentication=None, verbose=True)
2024-06-04 20:41:40,078:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:41:40,079:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:41:40,079:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:41:40,079:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-04 20:41:40,261:INFO:Initializing load_model()
2024-06-04 20:41:40,261:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-04 20:41:40,277:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-04 20:41:40,277:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-04 20:41:40,279:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-04 20:41:40,279:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-04 20:41:42,808:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-04 20:41:43,637:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-04 20:42:30,992:INFO:Initializing predict_model()
2024-06-04 20:42:30,992:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000214062A7810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002140CC5B100>)
2024-06-04 20:42:30,992:INFO:Checking exceptions
2024-06-04 20:42:30,992:INFO:Preloading libraries
2024-06-04 20:42:30,999:INFO:Set up data.
2024-06-04 20:42:31,020:INFO:Set up index.
2024-06-05 13:26:06,902:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:26:06,903:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:26:06,903:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:26:06,903:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:26:08,264:INFO:Initializing load_model()
2024-06-05 13:26:08,264:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-05 13:26:08,282:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:26:08,282:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:26:08,284:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:26:08,284:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:26:10,720:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:26:11,105:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-05 13:30:10,393:INFO:Initializing predict_model()
2024-06-05 13:30:10,393:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C41F3A4750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C41F85BB00>)
2024-06-05 13:30:10,393:INFO:Checking exceptions
2024-06-05 13:30:10,393:INFO:Preloading libraries
2024-06-05 13:30:10,404:INFO:Set up data.
2024-06-05 13:30:10,443:INFO:Set up index.
2024-06-05 13:35:18,395:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:35:18,396:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:35:18,396:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:35:18,396:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:35:18,688:INFO:Initializing load_model()
2024-06-05 13:35:18,689:INFO:load_model(model_name=modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-05 13:37:28,981:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:37:28,981:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:37:28,981:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:37:28,981:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:37:29,265:INFO:Initializing load_model()
2024-06-05 13:37:29,265:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-05 13:37:29,268:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:37:29,269:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:37:29,270:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:37:29,270:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:37:31,441:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:37:31,653:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-05 13:37:39,461:INFO:Initializing predict_model()
2024-06-05 13:37:39,461:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020F3ADA63D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020F41A5B4C0>)
2024-06-05 13:37:39,461:INFO:Checking exceptions
2024-06-05 13:37:39,461:INFO:Preloading libraries
2024-06-05 13:37:39,462:INFO:Set up data.
2024-06-05 13:37:39,478:INFO:Set up index.
2024-06-05 13:39:07,495:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:39:07,496:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:39:07,496:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:39:07,496:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:39:07,754:INFO:Initializing load_model()
2024-06-05 13:39:07,754:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-05 13:39:07,758:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:39:07,759:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:39:07,760:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:39:07,760:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:39:10,771:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:39:11,094:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-05 13:39:23,224:INFO:Initializing predict_model()
2024-06-05 13:39:23,224:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002656E0A62D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002656E15B4C0>)
2024-06-05 13:39:23,224:INFO:Checking exceptions
2024-06-05 13:39:23,224:INFO:Preloading libraries
2024-06-05 13:39:23,226:INFO:Set up data.
2024-06-05 13:39:23,242:INFO:Set up index.
2024-06-05 13:40:42,366:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:40:42,366:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:40:42,366:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:40:42,366:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:40:42,582:INFO:Initializing load_model()
2024-06-05 13:40:42,582:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-05 13:40:42,586:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:40:42,587:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:40:42,587:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:40:42,587:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:40:44,617:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:40:44,896:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-05 13:41:21,613:INFO:Initializing predict_model()
2024-06-05 13:41:21,613:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EECEEA6310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EECEF5B4C0>)
2024-06-05 13:41:21,613:INFO:Checking exceptions
2024-06-05 13:41:21,613:INFO:Preloading libraries
2024-06-05 13:41:21,614:INFO:Set up data.
2024-06-05 13:41:21,630:INFO:Set up index.
2024-06-05 13:41:24,041:INFO:Initializing predict_model()
2024-06-05 13:41:24,041:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EECF318390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EECEF720C0>)
2024-06-05 13:41:24,041:INFO:Checking exceptions
2024-06-05 13:41:24,041:INFO:Preloading libraries
2024-06-05 13:41:24,041:INFO:Set up data.
2024-06-05 13:41:24,044:INFO:Set up index.
2024-06-05 13:41:26,207:INFO:Initializing predict_model()
2024-06-05 13:41:26,207:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EECEEA7A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EE975C2480>)
2024-06-05 13:41:26,207:INFO:Checking exceptions
2024-06-05 13:41:26,207:INFO:Preloading libraries
2024-06-05 13:41:26,208:INFO:Set up data.
2024-06-05 13:41:26,211:INFO:Set up index.
2024-06-05 13:41:28,384:INFO:Initializing predict_model()
2024-06-05 13:41:28,385:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EECF30B590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EECEF714E0>)
2024-06-05 13:41:28,385:INFO:Checking exceptions
2024-06-05 13:41:28,385:INFO:Preloading libraries
2024-06-05 13:41:28,385:INFO:Set up data.
2024-06-05 13:41:28,388:INFO:Set up index.
2024-06-05 13:41:30,553:INFO:Initializing predict_model()
2024-06-05 13:41:30,553:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EECF30BE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EECEF72340>)
2024-06-05 13:41:30,553:INFO:Checking exceptions
2024-06-05 13:41:30,553:INFO:Preloading libraries
2024-06-05 13:41:30,553:INFO:Set up data.
2024-06-05 13:41:30,556:INFO:Set up index.
2024-06-05 13:41:32,711:INFO:Initializing predict_model()
2024-06-05 13:41:32,711:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EECF31B390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EECEF720C0>)
2024-06-05 13:41:32,711:INFO:Checking exceptions
2024-06-05 13:41:32,711:INFO:Preloading libraries
2024-06-05 13:41:32,711:INFO:Set up data.
2024-06-05 13:41:32,714:INFO:Set up index.
2024-06-05 13:41:34,879:INFO:Initializing predict_model()
2024-06-05 13:41:34,879:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EECF31A2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EECEF71440>)
2024-06-05 13:41:34,879:INFO:Checking exceptions
2024-06-05 13:41:34,879:INFO:Preloading libraries
2024-06-05 13:41:34,880:INFO:Set up data.
2024-06-05 13:41:34,883:INFO:Set up index.
2024-06-05 13:45:03,701:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:45:03,701:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:45:03,702:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:45:03,702:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:45:03,924:INFO:Initializing load_model()
2024-06-05 13:45:03,924:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-05 13:45:03,926:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:45:03,926:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:45:03,927:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:45:03,927:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:45:06,914:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:45:07,227:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-05 13:45:15,887:INFO:Initializing predict_model()
2024-06-05 13:45:15,887:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000266553A2390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000266C685B4C0>)
2024-06-05 13:45:15,887:INFO:Checking exceptions
2024-06-05 13:45:15,887:INFO:Preloading libraries
2024-06-05 13:45:15,888:INFO:Set up data.
2024-06-05 13:45:15,906:INFO:Set up index.
2024-06-05 13:45:18,357:INFO:Initializing predict_model()
2024-06-05 13:45:18,357:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000266C687D490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000266C68762A0>)
2024-06-05 13:45:18,357:INFO:Checking exceptions
2024-06-05 13:45:18,357:INFO:Preloading libraries
2024-06-05 13:45:18,358:INFO:Set up data.
2024-06-05 13:45:18,361:INFO:Set up index.
2024-06-05 13:45:20,536:INFO:Initializing predict_model()
2024-06-05 13:45:20,536:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000266553A0650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000266C685AFC0>)
2024-06-05 13:45:20,536:INFO:Checking exceptions
2024-06-05 13:45:20,536:INFO:Preloading libraries
2024-06-05 13:45:20,536:INFO:Set up data.
2024-06-05 13:45:20,541:INFO:Set up index.
2024-06-05 13:46:46,462:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:46:46,462:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:46:46,462:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:46:46,462:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 13:46:46,691:INFO:Initializing load_model()
2024-06-05 13:46:46,691:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-05 13:46:46,693:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:46:46,694:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:46:46,694:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:46:46,695:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:46:48,723:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 13:46:49,074:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-05 13:47:00,644:INFO:Initializing predict_model()
2024-06-05 13:47:00,644:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E4A24D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55B4C0>)
2024-06-05 13:47:00,644:INFO:Checking exceptions
2024-06-05 13:47:00,644:INFO:Preloading libraries
2024-06-05 13:47:00,645:INFO:Set up data.
2024-06-05 13:47:00,661:INFO:Set up index.
2024-06-05 13:47:03,113:INFO:Initializing predict_model()
2024-06-05 13:47:03,113:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E474990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55B240>)
2024-06-05 13:47:03,113:INFO:Checking exceptions
2024-06-05 13:47:03,113:INFO:Preloading libraries
2024-06-05 13:47:03,113:INFO:Set up data.
2024-06-05 13:47:03,116:INFO:Set up index.
2024-06-05 13:47:05,272:INFO:Initializing predict_model()
2024-06-05 13:47:05,272:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E57CD50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55AE80>)
2024-06-05 13:47:05,272:INFO:Checking exceptions
2024-06-05 13:47:05,272:INFO:Preloading libraries
2024-06-05 13:47:05,273:INFO:Set up data.
2024-06-05 13:47:05,275:INFO:Set up index.
2024-06-05 13:47:07,436:INFO:Initializing predict_model()
2024-06-05 13:47:07,436:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E55F9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55AFC0>)
2024-06-05 13:47:07,437:INFO:Checking exceptions
2024-06-05 13:47:07,437:INFO:Preloading libraries
2024-06-05 13:47:07,437:INFO:Set up data.
2024-06-05 13:47:07,439:INFO:Set up index.
2024-06-05 13:47:09,588:INFO:Initializing predict_model()
2024-06-05 13:47:09,588:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E4C1C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55BEC0>)
2024-06-05 13:47:09,588:INFO:Checking exceptions
2024-06-05 13:47:09,588:INFO:Preloading libraries
2024-06-05 13:47:09,588:INFO:Set up data.
2024-06-05 13:47:09,591:INFO:Set up index.
2024-06-05 13:47:11,741:INFO:Initializing predict_model()
2024-06-05 13:47:11,741:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E57F110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55AE80>)
2024-06-05 13:47:11,741:INFO:Checking exceptions
2024-06-05 13:47:11,741:INFO:Preloading libraries
2024-06-05 13:47:11,741:INFO:Set up data.
2024-06-05 13:47:11,744:INFO:Set up index.
2024-06-05 13:47:13,899:INFO:Initializing predict_model()
2024-06-05 13:47:13,899:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E55E010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55BEC0>)
2024-06-05 13:47:13,900:INFO:Checking exceptions
2024-06-05 13:47:13,900:INFO:Preloading libraries
2024-06-05 13:47:13,900:INFO:Set up data.
2024-06-05 13:47:13,902:INFO:Set up index.
2024-06-05 13:47:16,058:INFO:Initializing predict_model()
2024-06-05 13:47:16,058:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E57FB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55AFC0>)
2024-06-05 13:47:16,059:INFO:Checking exceptions
2024-06-05 13:47:16,059:INFO:Preloading libraries
2024-06-05 13:47:16,059:INFO:Set up data.
2024-06-05 13:47:16,061:INFO:Set up index.
2024-06-05 13:47:18,216:INFO:Initializing predict_model()
2024-06-05 13:47:18,216:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E4AC590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55BEC0>)
2024-06-05 13:47:18,216:INFO:Checking exceptions
2024-06-05 13:47:18,216:INFO:Preloading libraries
2024-06-05 13:47:18,216:INFO:Set up data.
2024-06-05 13:47:18,219:INFO:Set up index.
2024-06-05 13:49:00,929:INFO:Initializing predict_model()
2024-06-05 13:49:00,929:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E57FF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55AF20>)
2024-06-05 13:49:00,929:INFO:Checking exceptions
2024-06-05 13:49:00,929:INFO:Preloading libraries
2024-06-05 13:49:00,930:INFO:Set up data.
2024-06-05 13:49:00,933:INFO:Set up index.
2024-06-05 13:49:03,099:INFO:Initializing predict_model()
2024-06-05 13:49:03,099:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E4AE9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55AFC0>)
2024-06-05 13:49:03,100:INFO:Checking exceptions
2024-06-05 13:49:03,100:INFO:Preloading libraries
2024-06-05 13:49:03,100:INFO:Set up data.
2024-06-05 13:49:03,102:INFO:Set up index.
2024-06-05 13:49:05,269:INFO:Initializing predict_model()
2024-06-05 13:49:05,269:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E4CC210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55AE80>)
2024-06-05 13:49:05,269:INFO:Checking exceptions
2024-06-05 13:49:05,269:INFO:Preloading libraries
2024-06-05 13:49:05,269:INFO:Set up data.
2024-06-05 13:49:05,272:INFO:Set up index.
2024-06-05 13:49:07,466:INFO:Initializing predict_model()
2024-06-05 13:49:07,466:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E480710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E489440>)
2024-06-05 13:49:07,466:INFO:Checking exceptions
2024-06-05 13:49:07,466:INFO:Preloading libraries
2024-06-05 13:49:07,467:INFO:Set up data.
2024-06-05 13:49:07,470:INFO:Set up index.
2024-06-05 13:49:09,637:INFO:Initializing predict_model()
2024-06-05 13:49:09,637:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E476550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E4894E0>)
2024-06-05 13:49:09,637:INFO:Checking exceptions
2024-06-05 13:49:09,637:INFO:Preloading libraries
2024-06-05 13:49:09,637:INFO:Set up data.
2024-06-05 13:49:09,639:INFO:Set up index.
2024-06-05 13:49:11,797:INFO:Initializing predict_model()
2024-06-05 13:49:11,797:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E4A0890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55AE80>)
2024-06-05 13:49:11,797:INFO:Checking exceptions
2024-06-05 13:49:11,797:INFO:Preloading libraries
2024-06-05 13:49:11,798:INFO:Set up data.
2024-06-05 13:49:11,800:INFO:Set up index.
2024-06-05 13:49:13,952:INFO:Initializing predict_model()
2024-06-05 13:49:13,953:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E4774D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E4898A0>)
2024-06-05 13:49:13,953:INFO:Checking exceptions
2024-06-05 13:49:13,953:INFO:Preloading libraries
2024-06-05 13:49:13,953:INFO:Set up data.
2024-06-05 13:49:13,955:INFO:Set up index.
2024-06-05 13:49:16,114:INFO:Initializing predict_model()
2024-06-05 13:49:16,114:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E4CC5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55AF20>)
2024-06-05 13:49:16,114:INFO:Checking exceptions
2024-06-05 13:49:16,114:INFO:Preloading libraries
2024-06-05 13:49:16,114:INFO:Set up data.
2024-06-05 13:49:16,116:INFO:Set up index.
2024-06-05 13:49:18,275:INFO:Initializing predict_model()
2024-06-05 13:49:18,275:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E57C850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55AE80>)
2024-06-05 13:49:18,275:INFO:Checking exceptions
2024-06-05 13:49:18,275:INFO:Preloading libraries
2024-06-05 13:49:18,276:INFO:Set up data.
2024-06-05 13:49:18,278:INFO:Set up index.
2024-06-05 13:52:59,491:INFO:Initializing predict_model()
2024-06-05 13:52:59,493:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E477150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55AF20>)
2024-06-05 13:52:59,493:INFO:Checking exceptions
2024-06-05 13:52:59,493:INFO:Preloading libraries
2024-06-05 13:52:59,500:INFO:Set up data.
2024-06-05 13:52:59,519:INFO:Set up index.
2024-06-05 13:53:01,766:INFO:Initializing predict_model()
2024-06-05 13:53:01,766:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E57F950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55AE80>)
2024-06-05 13:53:01,766:INFO:Checking exceptions
2024-06-05 13:53:01,766:INFO:Preloading libraries
2024-06-05 13:53:01,766:INFO:Set up data.
2024-06-05 13:53:01,770:INFO:Set up index.
2024-06-05 13:53:03,922:INFO:Initializing predict_model()
2024-06-05 13:53:03,922:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E57E590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E489300>)
2024-06-05 13:53:03,924:INFO:Checking exceptions
2024-06-05 13:53:03,924:INFO:Preloading libraries
2024-06-05 13:53:03,924:INFO:Set up data.
2024-06-05 13:53:03,928:INFO:Set up index.
2024-06-05 13:53:06,102:INFO:Initializing predict_model()
2024-06-05 13:53:06,103:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E477590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55AF20>)
2024-06-05 13:53:06,103:INFO:Checking exceptions
2024-06-05 13:53:06,103:INFO:Preloading libraries
2024-06-05 13:53:06,103:INFO:Set up data.
2024-06-05 13:53:06,106:INFO:Set up index.
2024-06-05 13:53:08,270:INFO:Initializing predict_model()
2024-06-05 13:53:08,271:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E57DC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55B240>)
2024-06-05 13:53:08,271:INFO:Checking exceptions
2024-06-05 13:53:08,271:INFO:Preloading libraries
2024-06-05 13:53:08,271:INFO:Set up data.
2024-06-05 13:53:08,273:INFO:Set up index.
2024-06-05 13:53:10,458:INFO:Initializing predict_model()
2024-06-05 13:53:10,458:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E4AE250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55AF20>)
2024-06-05 13:53:10,459:INFO:Checking exceptions
2024-06-05 13:53:10,459:INFO:Preloading libraries
2024-06-05 13:53:10,459:INFO:Set up data.
2024-06-05 13:53:10,461:INFO:Set up index.
2024-06-05 13:53:12,625:INFO:Initializing predict_model()
2024-06-05 13:53:12,625:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E55EF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55B240>)
2024-06-05 13:53:12,625:INFO:Checking exceptions
2024-06-05 13:53:12,625:INFO:Preloading libraries
2024-06-05 13:53:12,625:INFO:Set up data.
2024-06-05 13:53:12,627:INFO:Set up index.
2024-06-05 13:53:14,809:INFO:Initializing predict_model()
2024-06-05 13:53:14,809:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E496910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E48A840>)
2024-06-05 13:53:14,809:INFO:Checking exceptions
2024-06-05 13:53:14,809:INFO:Preloading libraries
2024-06-05 13:53:14,809:INFO:Set up data.
2024-06-05 13:53:14,813:INFO:Set up index.
2024-06-05 13:53:16,977:INFO:Initializing predict_model()
2024-06-05 13:53:16,977:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020D1E494250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020D1E55AF20>)
2024-06-05 13:53:16,977:INFO:Checking exceptions
2024-06-05 13:53:16,977:INFO:Preloading libraries
2024-06-05 13:53:16,977:INFO:Set up data.
2024-06-05 13:53:16,979:INFO:Set up index.
2024-06-05 16:35:07,290:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 16:35:07,290:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 16:35:07,290:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 16:35:07,290:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 16:35:08,572:INFO:Initializing load_model()
2024-06-05 16:35:08,572:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-05 16:35:08,594:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 16:35:08,594:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 16:35:08,595:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 16:35:08,595:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 16:35:11,163:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 16:35:11,743:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-05 16:35:29,405:INFO:Initializing predict_model()
2024-06-05 16:35:29,405:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9A6590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5B4C0>)
2024-06-05 16:35:29,406:INFO:Checking exceptions
2024-06-05 16:35:29,406:INFO:Preloading libraries
2024-06-05 16:35:29,407:INFO:Set up data.
2024-06-05 16:35:29,419:INFO:Set up index.
2024-06-05 16:35:31,863:INFO:Initializing predict_model()
2024-06-05 16:35:31,863:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9763D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5B240>)
2024-06-05 16:35:31,863:INFO:Checking exceptions
2024-06-05 16:35:31,863:INFO:Preloading libraries
2024-06-05 16:35:31,863:INFO:Set up data.
2024-06-05 16:35:31,869:INFO:Set up index.
2024-06-05 16:35:34,034:INFO:Initializing predict_model()
2024-06-05 16:35:34,034:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E63C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 16:35:34,034:INFO:Checking exceptions
2024-06-05 16:35:34,034:INFO:Preloading libraries
2024-06-05 16:35:34,034:INFO:Set up data.
2024-06-05 16:35:34,037:INFO:Set up index.
2024-06-05 16:35:36,211:INFO:Initializing predict_model()
2024-06-05 16:35:36,211:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:35:36,211:INFO:Checking exceptions
2024-06-05 16:35:36,211:INFO:Preloading libraries
2024-06-05 16:35:36,211:INFO:Set up data.
2024-06-05 16:35:36,214:INFO:Set up index.
2024-06-05 16:35:38,378:INFO:Initializing predict_model()
2024-06-05 16:35:38,379:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7C850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5BEC0>)
2024-06-05 16:35:38,379:INFO:Checking exceptions
2024-06-05 16:35:38,379:INFO:Preloading libraries
2024-06-05 16:35:38,379:INFO:Set up data.
2024-06-05 16:35:38,383:INFO:Set up index.
2024-06-05 16:35:40,561:INFO:Initializing predict_model()
2024-06-05 16:35:40,561:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9AC450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5ADE0>)
2024-06-05 16:35:40,562:INFO:Checking exceptions
2024-06-05 16:35:40,562:INFO:Preloading libraries
2024-06-05 16:35:40,562:INFO:Set up data.
2024-06-05 16:35:40,564:INFO:Set up index.
2024-06-05 16:35:42,736:INFO:Initializing predict_model()
2024-06-05 16:35:42,736:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB976090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5BEC0>)
2024-06-05 16:35:42,736:INFO:Checking exceptions
2024-06-05 16:35:42,736:INFO:Preloading libraries
2024-06-05 16:35:42,738:INFO:Set up data.
2024-06-05 16:35:42,740:INFO:Set up index.
2024-06-05 16:35:44,892:INFO:Initializing predict_model()
2024-06-05 16:35:44,892:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB997F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 16:35:44,892:INFO:Checking exceptions
2024-06-05 16:35:44,892:INFO:Preloading libraries
2024-06-05 16:35:44,892:INFO:Set up data.
2024-06-05 16:35:44,895:INFO:Set up index.
2024-06-05 16:35:47,065:INFO:Initializing predict_model()
2024-06-05 16:35:47,065:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E63350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5BEC0>)
2024-06-05 16:35:47,065:INFO:Checking exceptions
2024-06-05 16:35:47,065:INFO:Preloading libraries
2024-06-05 16:35:47,066:INFO:Set up data.
2024-06-05 16:35:47,068:INFO:Set up index.
2024-06-05 16:39:25,420:INFO:Initializing predict_model()
2024-06-05 16:39:25,424:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9942D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:39:25,424:INFO:Checking exceptions
2024-06-05 16:39:25,424:INFO:Preloading libraries
2024-06-05 16:39:25,433:INFO:Set up data.
2024-06-05 16:39:25,449:INFO:Set up index.
2024-06-05 16:39:28,019:INFO:Initializing predict_model()
2024-06-05 16:39:28,019:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E61A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5BEC0>)
2024-06-05 16:39:28,019:INFO:Checking exceptions
2024-06-05 16:39:28,019:INFO:Preloading libraries
2024-06-05 16:39:28,019:INFO:Set up data.
2024-06-05 16:39:28,021:INFO:Set up index.
2024-06-05 16:39:30,210:INFO:Initializing predict_model()
2024-06-05 16:39:30,210:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB936B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 16:39:30,210:INFO:Checking exceptions
2024-06-05 16:39:30,210:INFO:Preloading libraries
2024-06-05 16:39:30,210:INFO:Set up data.
2024-06-05 16:39:30,212:INFO:Set up index.
2024-06-05 16:39:32,387:INFO:Initializing predict_model()
2024-06-05 16:39:32,387:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9CC8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98AE80>)
2024-06-05 16:39:32,388:INFO:Checking exceptions
2024-06-05 16:39:32,388:INFO:Preloading libraries
2024-06-05 16:39:32,388:INFO:Set up data.
2024-06-05 16:39:32,390:INFO:Set up index.
2024-06-05 16:39:34,564:INFO:Initializing predict_model()
2024-06-05 16:39:34,565:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9A6E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98ACA0>)
2024-06-05 16:39:34,565:INFO:Checking exceptions
2024-06-05 16:39:34,565:INFO:Preloading libraries
2024-06-05 16:39:34,565:INFO:Set up data.
2024-06-05 16:39:34,568:INFO:Set up index.
2024-06-05 16:39:36,781:INFO:Initializing predict_model()
2024-06-05 16:39:36,781:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7E410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 16:39:36,782:INFO:Checking exceptions
2024-06-05 16:39:36,782:INFO:Preloading libraries
2024-06-05 16:39:36,782:INFO:Set up data.
2024-06-05 16:39:36,785:INFO:Set up index.
2024-06-05 16:39:39,028:INFO:Initializing predict_model()
2024-06-05 16:39:39,028:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB977810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98B100>)
2024-06-05 16:39:39,028:INFO:Checking exceptions
2024-06-05 16:39:39,028:INFO:Preloading libraries
2024-06-05 16:39:39,028:INFO:Set up data.
2024-06-05 16:39:39,032:INFO:Set up index.
2024-06-05 16:39:41,243:INFO:Initializing predict_model()
2024-06-05 16:39:41,243:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7FF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:39:41,243:INFO:Checking exceptions
2024-06-05 16:39:41,243:INFO:Preloading libraries
2024-06-05 16:39:41,244:INFO:Set up data.
2024-06-05 16:39:41,250:INFO:Set up index.
2024-06-05 16:39:43,442:INFO:Initializing predict_model()
2024-06-05 16:39:43,442:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E80950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 16:39:43,442:INFO:Checking exceptions
2024-06-05 16:39:43,442:INFO:Preloading libraries
2024-06-05 16:39:43,442:INFO:Set up data.
2024-06-05 16:39:43,445:INFO:Set up index.
2024-06-05 16:41:50,476:INFO:Initializing predict_model()
2024-06-05 16:41:50,476:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E82150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:41:50,476:INFO:Checking exceptions
2024-06-05 16:41:50,477:INFO:Preloading libraries
2024-06-05 16:41:50,477:INFO:Set up data.
2024-06-05 16:41:50,483:INFO:Set up index.
2024-06-05 16:41:52,682:INFO:Initializing predict_model()
2024-06-05 16:41:52,682:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E837D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 16:41:52,682:INFO:Checking exceptions
2024-06-05 16:41:52,682:INFO:Preloading libraries
2024-06-05 16:41:52,682:INFO:Set up data.
2024-06-05 16:41:52,687:INFO:Set up index.
2024-06-05 16:41:54,885:INFO:Initializing predict_model()
2024-06-05 16:41:54,885:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7F190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB989580>)
2024-06-05 16:41:54,885:INFO:Checking exceptions
2024-06-05 16:41:54,885:INFO:Preloading libraries
2024-06-05 16:41:54,885:INFO:Set up data.
2024-06-05 16:41:54,888:INFO:Set up index.
2024-06-05 16:41:57,112:INFO:Initializing predict_model()
2024-06-05 16:41:57,112:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB997090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:41:57,112:INFO:Checking exceptions
2024-06-05 16:41:57,112:INFO:Preloading libraries
2024-06-05 16:41:57,113:INFO:Set up data.
2024-06-05 16:41:57,118:INFO:Set up index.
2024-06-05 16:41:59,308:INFO:Initializing predict_model()
2024-06-05 16:41:59,308:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9CC0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 16:41:59,308:INFO:Checking exceptions
2024-06-05 16:41:59,308:INFO:Preloading libraries
2024-06-05 16:41:59,308:INFO:Set up data.
2024-06-05 16:41:59,309:INFO:Set up index.
2024-06-05 16:42:01,505:INFO:Initializing predict_model()
2024-06-05 16:42:01,505:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB975E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:42:01,505:INFO:Checking exceptions
2024-06-05 16:42:01,506:INFO:Preloading libraries
2024-06-05 16:42:01,506:INFO:Set up data.
2024-06-05 16:42:01,520:INFO:Set up index.
2024-06-05 16:42:03,711:INFO:Initializing predict_model()
2024-06-05 16:42:03,711:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB995A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 16:42:03,711:INFO:Checking exceptions
2024-06-05 16:42:03,711:INFO:Preloading libraries
2024-06-05 16:42:03,712:INFO:Set up data.
2024-06-05 16:42:03,714:INFO:Set up index.
2024-06-05 16:42:05,908:INFO:Initializing predict_model()
2024-06-05 16:42:05,908:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E83D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB989260>)
2024-06-05 16:42:05,908:INFO:Checking exceptions
2024-06-05 16:42:05,908:INFO:Preloading libraries
2024-06-05 16:42:05,909:INFO:Set up data.
2024-06-05 16:42:05,913:INFO:Set up index.
2024-06-05 16:42:08,101:INFO:Initializing predict_model()
2024-06-05 16:42:08,101:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E833D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:42:08,101:INFO:Checking exceptions
2024-06-05 16:42:08,101:INFO:Preloading libraries
2024-06-05 16:42:08,101:INFO:Set up data.
2024-06-05 16:42:08,105:INFO:Set up index.
2024-06-05 16:45:22,223:INFO:Initializing predict_model()
2024-06-05 16:45:22,225:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB996C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 16:45:22,225:INFO:Checking exceptions
2024-06-05 16:45:22,225:INFO:Preloading libraries
2024-06-05 16:45:22,231:INFO:Set up data.
2024-06-05 16:45:22,254:INFO:Set up index.
2024-06-05 16:45:24,726:INFO:Initializing predict_model()
2024-06-05 16:45:24,726:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB977D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:45:24,726:INFO:Checking exceptions
2024-06-05 16:45:24,726:INFO:Preloading libraries
2024-06-05 16:45:24,726:INFO:Set up data.
2024-06-05 16:45:24,733:INFO:Set up index.
2024-06-05 16:45:26,909:INFO:Initializing predict_model()
2024-06-05 16:45:26,909:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7ED90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 16:45:26,909:INFO:Checking exceptions
2024-06-05 16:45:26,909:INFO:Preloading libraries
2024-06-05 16:45:26,909:INFO:Set up data.
2024-06-05 16:45:26,915:INFO:Set up index.
2024-06-05 16:45:29,059:INFO:Initializing predict_model()
2024-06-05 16:45:29,059:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E61E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98A980>)
2024-06-05 16:45:29,059:INFO:Checking exceptions
2024-06-05 16:45:29,059:INFO:Preloading libraries
2024-06-05 16:45:29,060:INFO:Set up data.
2024-06-05 16:45:29,064:INFO:Set up index.
2024-06-05 16:45:31,237:INFO:Initializing predict_model()
2024-06-05 16:45:31,237:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB97DD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:45:31,237:INFO:Checking exceptions
2024-06-05 16:45:31,237:INFO:Preloading libraries
2024-06-05 16:45:31,237:INFO:Set up data.
2024-06-05 16:45:31,240:INFO:Set up index.
2024-06-05 16:45:33,399:INFO:Initializing predict_model()
2024-06-05 16:45:33,399:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7EE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 16:45:33,399:INFO:Checking exceptions
2024-06-05 16:45:33,399:INFO:Preloading libraries
2024-06-05 16:45:33,399:INFO:Set up data.
2024-06-05 16:45:33,403:INFO:Set up index.
2024-06-05 16:45:35,564:INFO:Initializing predict_model()
2024-06-05 16:45:35,564:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9A7FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:45:35,564:INFO:Checking exceptions
2024-06-05 16:45:35,564:INFO:Preloading libraries
2024-06-05 16:45:35,565:INFO:Set up data.
2024-06-05 16:45:35,567:INFO:Set up index.
2024-06-05 16:45:37,722:INFO:Initializing predict_model()
2024-06-05 16:45:37,722:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7FD50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 16:45:37,722:INFO:Checking exceptions
2024-06-05 16:45:37,722:INFO:Preloading libraries
2024-06-05 16:45:37,723:INFO:Set up data.
2024-06-05 16:45:37,727:INFO:Set up index.
2024-06-05 16:45:39,896:INFO:Initializing predict_model()
2024-06-05 16:45:39,896:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9A6C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98A0C0>)
2024-06-05 16:45:39,896:INFO:Checking exceptions
2024-06-05 16:45:39,896:INFO:Preloading libraries
2024-06-05 16:45:39,896:INFO:Set up data.
2024-06-05 16:45:39,899:INFO:Set up index.
2024-06-05 16:51:35,883:INFO:Initializing predict_model()
2024-06-05 16:51:35,884:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7DFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:51:35,885:INFO:Checking exceptions
2024-06-05 16:51:35,885:INFO:Preloading libraries
2024-06-05 16:51:35,891:INFO:Set up data.
2024-06-05 16:51:35,904:INFO:Set up index.
2024-06-05 16:51:38,279:INFO:Initializing predict_model()
2024-06-05 16:51:38,279:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7EED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 16:51:38,279:INFO:Checking exceptions
2024-06-05 16:51:38,279:INFO:Preloading libraries
2024-06-05 16:51:38,280:INFO:Set up data.
2024-06-05 16:51:38,283:INFO:Set up index.
2024-06-05 16:51:40,448:INFO:Initializing predict_model()
2024-06-05 16:51:40,448:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E83090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:51:40,448:INFO:Checking exceptions
2024-06-05 16:51:40,448:INFO:Preloading libraries
2024-06-05 16:51:40,448:INFO:Set up data.
2024-06-05 16:51:40,451:INFO:Set up index.
2024-06-05 16:51:42,624:INFO:Initializing predict_model()
2024-06-05 16:51:42,625:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E83C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 16:51:42,625:INFO:Checking exceptions
2024-06-05 16:51:42,625:INFO:Preloading libraries
2024-06-05 16:51:42,625:INFO:Set up data.
2024-06-05 16:51:42,630:INFO:Set up index.
2024-06-05 16:51:44,825:INFO:Initializing predict_model()
2024-06-05 16:51:44,825:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E80C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB989D00>)
2024-06-05 16:51:44,825:INFO:Checking exceptions
2024-06-05 16:51:44,825:INFO:Preloading libraries
2024-06-05 16:51:44,827:INFO:Set up data.
2024-06-05 16:51:44,831:INFO:Set up index.
2024-06-05 16:51:47,025:INFO:Initializing predict_model()
2024-06-05 16:51:47,025:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9944D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:51:47,025:INFO:Checking exceptions
2024-06-05 16:51:47,025:INFO:Preloading libraries
2024-06-05 16:51:47,025:INFO:Set up data.
2024-06-05 16:51:47,028:INFO:Set up index.
2024-06-05 16:51:49,204:INFO:Initializing predict_model()
2024-06-05 16:51:49,204:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB953E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 16:51:49,204:INFO:Checking exceptions
2024-06-05 16:51:49,204:INFO:Preloading libraries
2024-06-05 16:51:49,204:INFO:Set up data.
2024-06-05 16:51:49,207:INFO:Set up index.
2024-06-05 16:51:51,408:INFO:Initializing predict_model()
2024-06-05 16:51:51,408:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB97F250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:51:51,409:INFO:Checking exceptions
2024-06-05 16:51:51,409:INFO:Preloading libraries
2024-06-05 16:51:51,410:INFO:Set up data.
2024-06-05 16:51:51,416:INFO:Set up index.
2024-06-05 16:51:53,594:INFO:Initializing predict_model()
2024-06-05 16:51:53,594:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB996DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 16:51:53,594:INFO:Checking exceptions
2024-06-05 16:51:53,594:INFO:Preloading libraries
2024-06-05 16:51:53,594:INFO:Set up data.
2024-06-05 16:51:53,598:INFO:Set up index.
2024-06-05 16:54:09,577:INFO:Initializing predict_model()
2024-06-05 16:54:09,580:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E81290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98A980>)
2024-06-05 16:54:09,580:INFO:Checking exceptions
2024-06-05 16:54:09,580:INFO:Preloading libraries
2024-06-05 16:54:09,585:INFO:Set up data.
2024-06-05 16:54:09,600:INFO:Set up index.
2024-06-05 16:54:12,045:INFO:Initializing predict_model()
2024-06-05 16:54:12,046:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB97C050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:54:12,046:INFO:Checking exceptions
2024-06-05 16:54:12,046:INFO:Preloading libraries
2024-06-05 16:54:12,046:INFO:Set up data.
2024-06-05 16:54:12,048:INFO:Set up index.
2024-06-05 16:54:14,197:INFO:Initializing predict_model()
2024-06-05 16:54:14,197:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB977A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 16:54:14,197:INFO:Checking exceptions
2024-06-05 16:54:14,197:INFO:Preloading libraries
2024-06-05 16:54:14,197:INFO:Set up data.
2024-06-05 16:54:14,200:INFO:Set up index.
2024-06-05 16:54:16,354:INFO:Initializing predict_model()
2024-06-05 16:54:16,354:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9A50D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:54:16,354:INFO:Checking exceptions
2024-06-05 16:54:16,354:INFO:Preloading libraries
2024-06-05 16:54:16,354:INFO:Set up data.
2024-06-05 16:54:16,357:INFO:Set up index.
2024-06-05 16:54:18,522:INFO:Initializing predict_model()
2024-06-05 16:54:18,522:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7DBD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 16:54:18,523:INFO:Checking exceptions
2024-06-05 16:54:18,523:INFO:Preloading libraries
2024-06-05 16:54:18,523:INFO:Set up data.
2024-06-05 16:54:18,526:INFO:Set up index.
2024-06-05 16:54:20,691:INFO:Initializing predict_model()
2024-06-05 16:54:20,691:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9AC090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98AE80>)
2024-06-05 16:54:20,692:INFO:Checking exceptions
2024-06-05 16:54:20,692:INFO:Preloading libraries
2024-06-05 16:54:20,692:INFO:Set up data.
2024-06-05 16:54:20,696:INFO:Set up index.
2024-06-05 16:54:22,841:INFO:Initializing predict_model()
2024-06-05 16:54:22,842:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7E450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:54:22,842:INFO:Checking exceptions
2024-06-05 16:54:22,842:INFO:Preloading libraries
2024-06-05 16:54:22,842:INFO:Set up data.
2024-06-05 16:54:22,844:INFO:Set up index.
2024-06-05 16:54:25,013:INFO:Initializing predict_model()
2024-06-05 16:54:25,013:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9A5E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 16:54:25,013:INFO:Checking exceptions
2024-06-05 16:54:25,013:INFO:Preloading libraries
2024-06-05 16:54:25,014:INFO:Set up data.
2024-06-05 16:54:25,017:INFO:Set up index.
2024-06-05 16:54:27,164:INFO:Initializing predict_model()
2024-06-05 16:54:27,164:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9ADA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:54:27,164:INFO:Checking exceptions
2024-06-05 16:54:27,164:INFO:Preloading libraries
2024-06-05 16:54:27,165:INFO:Set up data.
2024-06-05 16:54:27,167:INFO:Set up index.
2024-06-05 16:56:50,465:INFO:Initializing predict_model()
2024-06-05 16:56:50,465:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7C450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 16:56:50,465:INFO:Checking exceptions
2024-06-05 16:56:50,465:INFO:Preloading libraries
2024-06-05 16:56:50,467:INFO:Set up data.
2024-06-05 16:56:50,475:INFO:Set up index.
2024-06-05 16:56:52,757:INFO:Initializing predict_model()
2024-06-05 16:56:52,757:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7E6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB9891C0>)
2024-06-05 16:56:52,757:INFO:Checking exceptions
2024-06-05 16:56:52,758:INFO:Preloading libraries
2024-06-05 16:56:52,758:INFO:Set up data.
2024-06-05 16:56:52,760:INFO:Set up index.
2024-06-05 16:56:54,929:INFO:Initializing predict_model()
2024-06-05 16:56:54,929:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9A7E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:56:54,929:INFO:Checking exceptions
2024-06-05 16:56:54,930:INFO:Preloading libraries
2024-06-05 16:56:54,930:INFO:Set up data.
2024-06-05 16:56:54,931:INFO:Set up index.
2024-06-05 16:56:57,103:INFO:Initializing predict_model()
2024-06-05 16:56:57,103:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB97DF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 16:56:57,103:INFO:Checking exceptions
2024-06-05 16:56:57,104:INFO:Preloading libraries
2024-06-05 16:56:57,104:INFO:Set up data.
2024-06-05 16:56:57,109:INFO:Set up index.
2024-06-05 16:56:59,270:INFO:Initializing predict_model()
2024-06-05 16:56:59,270:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E86FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:56:59,270:INFO:Checking exceptions
2024-06-05 16:56:59,270:INFO:Preloading libraries
2024-06-05 16:56:59,270:INFO:Set up data.
2024-06-05 16:56:59,275:INFO:Set up index.
2024-06-05 16:57:01,458:INFO:Initializing predict_model()
2024-06-05 16:57:01,459:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB997210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 16:57:01,459:INFO:Checking exceptions
2024-06-05 16:57:01,459:INFO:Preloading libraries
2024-06-05 16:57:01,459:INFO:Set up data.
2024-06-05 16:57:01,462:INFO:Set up index.
2024-06-05 16:57:03,645:INFO:Initializing predict_model()
2024-06-05 16:57:03,645:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB995E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98B4C0>)
2024-06-05 16:57:03,646:INFO:Checking exceptions
2024-06-05 16:57:03,646:INFO:Preloading libraries
2024-06-05 16:57:03,646:INFO:Set up data.
2024-06-05 16:57:03,648:INFO:Set up index.
2024-06-05 16:57:05,800:INFO:Initializing predict_model()
2024-06-05 16:57:05,800:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7C610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:57:05,800:INFO:Checking exceptions
2024-06-05 16:57:05,800:INFO:Preloading libraries
2024-06-05 16:57:05,800:INFO:Set up data.
2024-06-05 16:57:05,803:INFO:Set up index.
2024-06-05 16:57:07,982:INFO:Initializing predict_model()
2024-06-05 16:57:07,982:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9971D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 16:57:07,982:INFO:Checking exceptions
2024-06-05 16:57:07,982:INFO:Preloading libraries
2024-06-05 16:57:07,983:INFO:Set up data.
2024-06-05 16:57:07,987:INFO:Set up index.
2024-06-05 16:57:10,141:INFO:Initializing predict_model()
2024-06-05 16:57:10,141:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E81B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:57:10,141:INFO:Checking exceptions
2024-06-05 16:57:10,141:INFO:Preloading libraries
2024-06-05 16:57:10,141:INFO:Set up data.
2024-06-05 16:57:10,145:INFO:Set up index.
2024-06-05 16:59:42,389:INFO:Initializing predict_model()
2024-06-05 16:59:42,390:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB975810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 16:59:42,390:INFO:Checking exceptions
2024-06-05 16:59:42,390:INFO:Preloading libraries
2024-06-05 16:59:42,390:INFO:Set up data.
2024-06-05 16:59:42,394:INFO:Set up index.
2024-06-05 16:59:44,591:INFO:Initializing predict_model()
2024-06-05 16:59:44,591:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB975090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98A0C0>)
2024-06-05 16:59:44,591:INFO:Checking exceptions
2024-06-05 16:59:44,591:INFO:Preloading libraries
2024-06-05 16:59:44,592:INFO:Set up data.
2024-06-05 16:59:44,595:INFO:Set up index.
2024-06-05 16:59:46,764:INFO:Initializing predict_model()
2024-06-05 16:59:46,764:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9ACBD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:59:46,764:INFO:Checking exceptions
2024-06-05 16:59:46,764:INFO:Preloading libraries
2024-06-05 16:59:46,764:INFO:Set up data.
2024-06-05 16:59:46,770:INFO:Set up index.
2024-06-05 16:59:48,966:INFO:Initializing predict_model()
2024-06-05 16:59:48,966:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9A6ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 16:59:48,966:INFO:Checking exceptions
2024-06-05 16:59:48,966:INFO:Preloading libraries
2024-06-05 16:59:48,966:INFO:Set up data.
2024-06-05 16:59:48,969:INFO:Set up index.
2024-06-05 16:59:51,135:INFO:Initializing predict_model()
2024-06-05 16:59:51,135:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E81E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:59:51,136:INFO:Checking exceptions
2024-06-05 16:59:51,136:INFO:Preloading libraries
2024-06-05 16:59:51,136:INFO:Set up data.
2024-06-05 16:59:51,139:INFO:Set up index.
2024-06-05 16:59:53,293:INFO:Initializing predict_model()
2024-06-05 16:59:53,293:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E81C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 16:59:53,293:INFO:Checking exceptions
2024-06-05 16:59:53,293:INFO:Preloading libraries
2024-06-05 16:59:53,293:INFO:Set up data.
2024-06-05 16:59:53,296:INFO:Set up index.
2024-06-05 16:59:55,460:INFO:Initializing predict_model()
2024-06-05 16:59:55,461:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7CDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB989580>)
2024-06-05 16:59:55,461:INFO:Checking exceptions
2024-06-05 16:59:55,461:INFO:Preloading libraries
2024-06-05 16:59:55,461:INFO:Set up data.
2024-06-05 16:59:55,464:INFO:Set up index.
2024-06-05 16:59:57,622:INFO:Initializing predict_model()
2024-06-05 16:59:57,622:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB975B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 16:59:57,622:INFO:Checking exceptions
2024-06-05 16:59:57,622:INFO:Preloading libraries
2024-06-05 16:59:57,623:INFO:Set up data.
2024-06-05 16:59:57,627:INFO:Set up index.
2024-06-05 16:59:59,798:INFO:Initializing predict_model()
2024-06-05 16:59:59,798:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9AEF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 16:59:59,798:INFO:Checking exceptions
2024-06-05 16:59:59,798:INFO:Preloading libraries
2024-06-05 16:59:59,799:INFO:Set up data.
2024-06-05 16:59:59,801:INFO:Set up index.
2024-06-05 17:00:01,973:INFO:Initializing predict_model()
2024-06-05 17:00:01,973:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7C990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:00:01,973:INFO:Checking exceptions
2024-06-05 17:00:01,973:INFO:Preloading libraries
2024-06-05 17:00:01,973:INFO:Set up data.
2024-06-05 17:00:01,976:INFO:Set up index.
2024-06-05 17:07:48,313:INFO:Initializing predict_model()
2024-06-05 17:07:48,316:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9974D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:07:48,316:INFO:Checking exceptions
2024-06-05 17:07:48,317:INFO:Preloading libraries
2024-06-05 17:07:48,325:INFO:Set up data.
2024-06-05 17:07:48,344:INFO:Set up index.
2024-06-05 17:07:50,841:INFO:Initializing predict_model()
2024-06-05 17:07:50,841:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB975910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98AB60>)
2024-06-05 17:07:50,841:INFO:Checking exceptions
2024-06-05 17:07:50,841:INFO:Preloading libraries
2024-06-05 17:07:50,842:INFO:Set up data.
2024-06-05 17:07:50,844:INFO:Set up index.
2024-06-05 17:07:53,021:INFO:Initializing predict_model()
2024-06-05 17:07:53,022:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E82750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:07:53,022:INFO:Checking exceptions
2024-06-05 17:07:53,022:INFO:Preloading libraries
2024-06-05 17:07:53,022:INFO:Set up data.
2024-06-05 17:07:53,024:INFO:Set up index.
2024-06-05 17:07:55,164:INFO:Initializing predict_model()
2024-06-05 17:07:55,164:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9A7650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 17:07:55,164:INFO:Checking exceptions
2024-06-05 17:07:55,164:INFO:Preloading libraries
2024-06-05 17:07:55,165:INFO:Set up data.
2024-06-05 17:07:55,169:INFO:Set up index.
2024-06-05 17:07:57,320:INFO:Initializing predict_model()
2024-06-05 17:07:57,321:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E86850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:07:57,321:INFO:Checking exceptions
2024-06-05 17:07:57,321:INFO:Preloading libraries
2024-06-05 17:07:57,321:INFO:Set up data.
2024-06-05 17:07:57,323:INFO:Set up index.
2024-06-05 17:07:59,477:INFO:Initializing predict_model()
2024-06-05 17:07:59,477:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB997CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 17:07:59,477:INFO:Checking exceptions
2024-06-05 17:07:59,477:INFO:Preloading libraries
2024-06-05 17:07:59,477:INFO:Set up data.
2024-06-05 17:07:59,480:INFO:Set up index.
2024-06-05 17:08:01,641:INFO:Initializing predict_model()
2024-06-05 17:08:01,641:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9AC550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98ADE0>)
2024-06-05 17:08:01,641:INFO:Checking exceptions
2024-06-05 17:08:01,641:INFO:Preloading libraries
2024-06-05 17:08:01,641:INFO:Set up data.
2024-06-05 17:08:01,644:INFO:Set up index.
2024-06-05 17:08:03,815:INFO:Initializing predict_model()
2024-06-05 17:08:03,815:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E639D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:08:03,815:INFO:Checking exceptions
2024-06-05 17:08:03,815:INFO:Preloading libraries
2024-06-05 17:08:03,816:INFO:Set up data.
2024-06-05 17:08:03,818:INFO:Set up index.
2024-06-05 17:08:05,975:INFO:Initializing predict_model()
2024-06-05 17:08:05,975:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB977D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:08:05,976:INFO:Checking exceptions
2024-06-05 17:08:05,976:INFO:Preloading libraries
2024-06-05 17:08:05,976:INFO:Set up data.
2024-06-05 17:08:05,978:INFO:Set up index.
2024-06-05 17:08:08,143:INFO:Initializing predict_model()
2024-06-05 17:08:08,143:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9AD490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:08:08,143:INFO:Checking exceptions
2024-06-05 17:08:08,143:INFO:Preloading libraries
2024-06-05 17:08:08,144:INFO:Set up data.
2024-06-05 17:08:08,148:INFO:Set up index.
2024-06-05 17:09:52,567:INFO:Initializing predict_model()
2024-06-05 17:09:52,574:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB97F7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:09:52,575:INFO:Checking exceptions
2024-06-05 17:09:52,575:INFO:Preloading libraries
2024-06-05 17:09:52,594:INFO:Set up data.
2024-06-05 17:09:52,623:INFO:Set up index.
2024-06-05 17:09:55,326:INFO:Initializing predict_model()
2024-06-05 17:09:55,326:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7D410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98A8E0>)
2024-06-05 17:09:55,326:INFO:Checking exceptions
2024-06-05 17:09:55,326:INFO:Preloading libraries
2024-06-05 17:09:55,326:INFO:Set up data.
2024-06-05 17:09:55,328:INFO:Set up index.
2024-06-05 17:09:57,504:INFO:Initializing predict_model()
2024-06-05 17:09:57,504:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB97FC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:09:57,504:INFO:Checking exceptions
2024-06-05 17:09:57,504:INFO:Preloading libraries
2024-06-05 17:09:57,505:INFO:Set up data.
2024-06-05 17:09:57,508:INFO:Set up index.
2024-06-05 17:09:59,698:INFO:Initializing predict_model()
2024-06-05 17:09:59,698:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E830D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 17:09:59,698:INFO:Checking exceptions
2024-06-05 17:09:59,698:INFO:Preloading libraries
2024-06-05 17:09:59,698:INFO:Set up data.
2024-06-05 17:09:59,703:INFO:Set up index.
2024-06-05 17:10:01,871:INFO:Initializing predict_model()
2024-06-05 17:10:01,871:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E84D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:10:01,871:INFO:Checking exceptions
2024-06-05 17:10:01,871:INFO:Preloading libraries
2024-06-05 17:10:01,871:INFO:Set up data.
2024-06-05 17:10:01,873:INFO:Set up index.
2024-06-05 17:10:04,042:INFO:Initializing predict_model()
2024-06-05 17:10:04,043:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB97D7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 17:10:04,043:INFO:Checking exceptions
2024-06-05 17:10:04,043:INFO:Preloading libraries
2024-06-05 17:10:04,043:INFO:Set up data.
2024-06-05 17:10:04,048:INFO:Set up index.
2024-06-05 17:12:19,600:INFO:Initializing predict_model()
2024-06-05 17:12:19,604:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E81310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB989300>)
2024-06-05 17:12:19,604:INFO:Checking exceptions
2024-06-05 17:12:19,604:INFO:Preloading libraries
2024-06-05 17:12:19,610:INFO:Set up data.
2024-06-05 17:12:19,627:INFO:Set up index.
2024-06-05 17:12:22,059:INFO:Initializing predict_model()
2024-06-05 17:12:22,059:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9AD890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:12:22,059:INFO:Checking exceptions
2024-06-05 17:12:22,059:INFO:Preloading libraries
2024-06-05 17:12:22,059:INFO:Set up data.
2024-06-05 17:12:22,062:INFO:Set up index.
2024-06-05 17:12:24,227:INFO:Initializing predict_model()
2024-06-05 17:12:24,227:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB997690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:12:24,227:INFO:Checking exceptions
2024-06-05 17:12:24,227:INFO:Preloading libraries
2024-06-05 17:12:24,227:INFO:Set up data.
2024-06-05 17:12:24,229:INFO:Set up index.
2024-06-05 17:12:26,400:INFO:Initializing predict_model()
2024-06-05 17:12:26,400:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7F290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:12:26,401:INFO:Checking exceptions
2024-06-05 17:12:26,401:INFO:Preloading libraries
2024-06-05 17:12:26,401:INFO:Set up data.
2024-06-05 17:12:26,405:INFO:Set up index.
2024-06-05 17:12:28,574:INFO:Initializing predict_model()
2024-06-05 17:12:28,574:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9AD350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:12:28,574:INFO:Checking exceptions
2024-06-05 17:12:28,574:INFO:Preloading libraries
2024-06-05 17:12:28,574:INFO:Set up data.
2024-06-05 17:12:28,577:INFO:Set up index.
2024-06-05 17:12:30,734:INFO:Initializing predict_model()
2024-06-05 17:12:30,734:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E87150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98B240>)
2024-06-05 17:12:30,734:INFO:Checking exceptions
2024-06-05 17:12:30,734:INFO:Preloading libraries
2024-06-05 17:12:30,734:INFO:Set up data.
2024-06-05 17:12:30,736:INFO:Set up index.
2024-06-05 17:12:32,919:INFO:Initializing predict_model()
2024-06-05 17:12:32,919:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E80110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:12:32,919:INFO:Checking exceptions
2024-06-05 17:12:32,919:INFO:Preloading libraries
2024-06-05 17:12:32,920:INFO:Set up data.
2024-06-05 17:12:32,925:INFO:Set up index.
2024-06-05 17:12:35,095:INFO:Initializing predict_model()
2024-06-05 17:12:35,095:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9AEE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 17:12:35,095:INFO:Checking exceptions
2024-06-05 17:12:35,095:INFO:Preloading libraries
2024-06-05 17:12:35,096:INFO:Set up data.
2024-06-05 17:12:35,099:INFO:Set up index.
2024-06-05 17:12:37,274:INFO:Initializing predict_model()
2024-06-05 17:12:37,274:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E87FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:12:37,275:INFO:Checking exceptions
2024-06-05 17:12:37,275:INFO:Preloading libraries
2024-06-05 17:12:37,275:INFO:Set up data.
2024-06-05 17:12:37,278:INFO:Set up index.
2024-06-05 17:12:39,445:INFO:Initializing predict_model()
2024-06-05 17:12:39,445:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E84210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 17:12:39,445:INFO:Checking exceptions
2024-06-05 17:12:39,446:INFO:Preloading libraries
2024-06-05 17:12:39,446:INFO:Set up data.
2024-06-05 17:12:39,448:INFO:Set up index.
2024-06-05 17:12:41,611:INFO:Initializing predict_model()
2024-06-05 17:12:41,611:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E62F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB989D00>)
2024-06-05 17:12:41,612:INFO:Checking exceptions
2024-06-05 17:12:41,612:INFO:Preloading libraries
2024-06-05 17:12:41,612:INFO:Set up data.
2024-06-05 17:12:41,616:INFO:Set up index.
2024-06-05 17:15:34,311:INFO:Initializing predict_model()
2024-06-05 17:15:34,314:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB975090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:15:34,314:INFO:Checking exceptions
2024-06-05 17:15:34,314:INFO:Preloading libraries
2024-06-05 17:15:34,320:INFO:Set up data.
2024-06-05 17:15:34,335:INFO:Set up index.
2024-06-05 17:15:36,791:INFO:Initializing predict_model()
2024-06-05 17:15:36,791:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7F310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:15:36,791:INFO:Checking exceptions
2024-06-05 17:15:36,791:INFO:Preloading libraries
2024-06-05 17:15:36,791:INFO:Set up data.
2024-06-05 17:15:36,795:INFO:Set up index.
2024-06-05 17:15:38,971:INFO:Initializing predict_model()
2024-06-05 17:15:38,971:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9957D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:15:38,971:INFO:Checking exceptions
2024-06-05 17:15:38,971:INFO:Preloading libraries
2024-06-05 17:15:38,972:INFO:Set up data.
2024-06-05 17:15:38,974:INFO:Set up index.
2024-06-05 17:15:41,142:INFO:Initializing predict_model()
2024-06-05 17:15:41,142:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB977750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:15:41,142:INFO:Checking exceptions
2024-06-05 17:15:41,142:INFO:Preloading libraries
2024-06-05 17:15:41,142:INFO:Set up data.
2024-06-05 17:15:41,146:INFO:Set up index.
2024-06-05 17:15:43,281:INFO:Initializing predict_model()
2024-06-05 17:15:43,282:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9AF150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98A660>)
2024-06-05 17:15:43,282:INFO:Checking exceptions
2024-06-05 17:15:43,282:INFO:Preloading libraries
2024-06-05 17:15:43,282:INFO:Set up data.
2024-06-05 17:15:43,284:INFO:Set up index.
2024-06-05 17:15:45,471:INFO:Initializing predict_model()
2024-06-05 17:15:45,471:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7F390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:15:45,471:INFO:Checking exceptions
2024-06-05 17:15:45,471:INFO:Preloading libraries
2024-06-05 17:15:45,472:INFO:Set up data.
2024-06-05 17:15:45,474:INFO:Set up index.
2024-06-05 17:15:47,633:INFO:Initializing predict_model()
2024-06-05 17:15:47,633:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E62010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 17:15:47,633:INFO:Checking exceptions
2024-06-05 17:15:47,633:INFO:Preloading libraries
2024-06-05 17:15:47,633:INFO:Set up data.
2024-06-05 17:15:47,635:INFO:Set up index.
2024-06-05 17:15:49,793:INFO:Initializing predict_model()
2024-06-05 17:15:49,793:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB974F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:15:49,794:INFO:Checking exceptions
2024-06-05 17:15:49,794:INFO:Preloading libraries
2024-06-05 17:15:49,794:INFO:Set up data.
2024-06-05 17:15:49,796:INFO:Set up index.
2024-06-05 17:15:51,967:INFO:Initializing predict_model()
2024-06-05 17:15:51,968:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7CB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 17:15:51,968:INFO:Checking exceptions
2024-06-05 17:15:51,968:INFO:Preloading libraries
2024-06-05 17:15:51,969:INFO:Set up data.
2024-06-05 17:15:51,977:INFO:Set up index.
2024-06-05 17:15:54,144:INFO:Initializing predict_model()
2024-06-05 17:15:54,144:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E862D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98A7A0>)
2024-06-05 17:15:54,144:INFO:Checking exceptions
2024-06-05 17:15:54,144:INFO:Preloading libraries
2024-06-05 17:15:54,144:INFO:Set up data.
2024-06-05 17:15:54,146:INFO:Set up index.
2024-06-05 17:15:56,307:INFO:Initializing predict_model()
2024-06-05 17:15:56,307:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9760D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:15:56,307:INFO:Checking exceptions
2024-06-05 17:15:56,307:INFO:Preloading libraries
2024-06-05 17:15:56,309:INFO:Set up data.
2024-06-05 17:15:56,310:INFO:Set up index.
2024-06-05 17:17:54,100:INFO:Initializing predict_model()
2024-06-05 17:17:54,103:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB995590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:17:54,103:INFO:Checking exceptions
2024-06-05 17:17:54,103:INFO:Preloading libraries
2024-06-05 17:17:54,107:INFO:Set up data.
2024-06-05 17:17:54,119:INFO:Set up index.
2024-06-05 17:17:56,522:INFO:Initializing predict_model()
2024-06-05 17:17:56,522:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9978D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:17:56,522:INFO:Checking exceptions
2024-06-05 17:17:56,522:INFO:Preloading libraries
2024-06-05 17:17:56,523:INFO:Set up data.
2024-06-05 17:17:56,525:INFO:Set up index.
2024-06-05 17:17:58,693:INFO:Initializing predict_model()
2024-06-05 17:17:58,693:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB994ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:17:58,693:INFO:Checking exceptions
2024-06-05 17:17:58,693:INFO:Preloading libraries
2024-06-05 17:17:58,693:INFO:Set up data.
2024-06-05 17:17:58,696:INFO:Set up index.
2024-06-05 17:18:00,868:INFO:Initializing predict_model()
2024-06-05 17:18:00,868:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9A7750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98A840>)
2024-06-05 17:18:00,868:INFO:Checking exceptions
2024-06-05 17:18:00,868:INFO:Preloading libraries
2024-06-05 17:18:00,868:INFO:Set up data.
2024-06-05 17:18:00,875:INFO:Set up index.
2024-06-05 17:18:03,113:INFO:Initializing predict_model()
2024-06-05 17:18:03,113:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB97D910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:18:03,113:INFO:Checking exceptions
2024-06-05 17:18:03,113:INFO:Preloading libraries
2024-06-05 17:18:03,113:INFO:Set up data.
2024-06-05 17:18:03,116:INFO:Set up index.
2024-06-05 17:18:05,282:INFO:Initializing predict_model()
2024-06-05 17:18:05,282:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB997890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 17:18:05,282:INFO:Checking exceptions
2024-06-05 17:18:05,282:INFO:Preloading libraries
2024-06-05 17:18:05,283:INFO:Set up data.
2024-06-05 17:18:05,287:INFO:Set up index.
2024-06-05 17:18:07,460:INFO:Initializing predict_model()
2024-06-05 17:18:07,460:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB97E590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:18:07,460:INFO:Checking exceptions
2024-06-05 17:18:07,460:INFO:Preloading libraries
2024-06-05 17:18:07,460:INFO:Set up data.
2024-06-05 17:18:07,463:INFO:Set up index.
2024-06-05 17:18:09,642:INFO:Initializing predict_model()
2024-06-05 17:18:09,642:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB97FC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 17:18:09,642:INFO:Checking exceptions
2024-06-05 17:18:09,643:INFO:Preloading libraries
2024-06-05 17:18:09,643:INFO:Set up data.
2024-06-05 17:18:09,647:INFO:Set up index.
2024-06-05 17:18:11,811:INFO:Initializing predict_model()
2024-06-05 17:18:11,811:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7ED10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98A0C0>)
2024-06-05 17:18:11,811:INFO:Checking exceptions
2024-06-05 17:18:11,811:INFO:Preloading libraries
2024-06-05 17:18:11,811:INFO:Set up data.
2024-06-05 17:18:11,813:INFO:Set up index.
2024-06-05 17:18:13,985:INFO:Initializing predict_model()
2024-06-05 17:18:13,985:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7C210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:18:13,985:INFO:Checking exceptions
2024-06-05 17:18:13,985:INFO:Preloading libraries
2024-06-05 17:18:13,985:INFO:Set up data.
2024-06-05 17:18:13,987:INFO:Set up index.
2024-06-05 17:18:16,146:INFO:Initializing predict_model()
2024-06-05 17:18:16,146:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E62510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:18:16,146:INFO:Checking exceptions
2024-06-05 17:18:16,146:INFO:Preloading libraries
2024-06-05 17:18:16,146:INFO:Set up data.
2024-06-05 17:18:16,149:INFO:Set up index.
2024-06-05 17:20:51,996:INFO:Initializing predict_model()
2024-06-05 17:20:51,997:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB997B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:20:51,997:INFO:Checking exceptions
2024-06-05 17:20:51,997:INFO:Preloading libraries
2024-06-05 17:20:52,002:INFO:Set up data.
2024-06-05 17:20:52,016:INFO:Set up index.
2024-06-05 17:20:54,435:INFO:Initializing predict_model()
2024-06-05 17:20:54,435:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7C390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:20:54,435:INFO:Checking exceptions
2024-06-05 17:20:54,435:INFO:Preloading libraries
2024-06-05 17:20:54,435:INFO:Set up data.
2024-06-05 17:20:54,438:INFO:Set up index.
2024-06-05 17:20:56,597:INFO:Initializing predict_model()
2024-06-05 17:20:56,597:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB994B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98B240>)
2024-06-05 17:20:56,597:INFO:Checking exceptions
2024-06-05 17:20:56,597:INFO:Preloading libraries
2024-06-05 17:20:56,597:INFO:Set up data.
2024-06-05 17:20:56,601:INFO:Set up index.
2024-06-05 17:20:58,769:INFO:Initializing predict_model()
2024-06-05 17:20:58,769:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9AEBD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:20:58,769:INFO:Checking exceptions
2024-06-05 17:20:58,769:INFO:Preloading libraries
2024-06-05 17:20:58,770:INFO:Set up data.
2024-06-05 17:20:58,774:INFO:Set up index.
2024-06-05 17:21:00,937:INFO:Initializing predict_model()
2024-06-05 17:21:00,938:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E81AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 17:21:00,938:INFO:Checking exceptions
2024-06-05 17:21:00,938:INFO:Preloading libraries
2024-06-05 17:21:00,938:INFO:Set up data.
2024-06-05 17:21:00,944:INFO:Set up index.
2024-06-05 17:21:03,130:INFO:Initializing predict_model()
2024-06-05 17:21:03,130:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E85CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:21:03,130:INFO:Checking exceptions
2024-06-05 17:21:03,130:INFO:Preloading libraries
2024-06-05 17:21:03,130:INFO:Set up data.
2024-06-05 17:21:03,133:INFO:Set up index.
2024-06-05 17:21:05,300:INFO:Initializing predict_model()
2024-06-05 17:21:05,300:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E866D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 17:21:05,300:INFO:Checking exceptions
2024-06-05 17:21:05,300:INFO:Preloading libraries
2024-06-05 17:21:05,300:INFO:Set up data.
2024-06-05 17:21:05,302:INFO:Set up index.
2024-06-05 17:21:07,441:INFO:Initializing predict_model()
2024-06-05 17:21:07,441:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9AE350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98A340>)
2024-06-05 17:21:07,441:INFO:Checking exceptions
2024-06-05 17:21:07,441:INFO:Preloading libraries
2024-06-05 17:21:07,441:INFO:Set up data.
2024-06-05 17:21:07,444:INFO:Set up index.
2024-06-05 17:21:09,602:INFO:Initializing predict_model()
2024-06-05 17:21:09,602:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB996650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:21:09,602:INFO:Checking exceptions
2024-06-05 17:21:09,602:INFO:Preloading libraries
2024-06-05 17:21:09,602:INFO:Set up data.
2024-06-05 17:21:09,605:INFO:Set up index.
2024-06-05 17:21:11,790:INFO:Initializing predict_model()
2024-06-05 17:21:11,790:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E83550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:21:11,790:INFO:Checking exceptions
2024-06-05 17:21:11,790:INFO:Preloading libraries
2024-06-05 17:21:11,790:INFO:Set up data.
2024-06-05 17:21:11,793:INFO:Set up index.
2024-06-05 17:21:13,948:INFO:Initializing predict_model()
2024-06-05 17:21:13,948:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7CA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:21:13,948:INFO:Checking exceptions
2024-06-05 17:21:13,948:INFO:Preloading libraries
2024-06-05 17:21:13,949:INFO:Set up data.
2024-06-05 17:21:13,952:INFO:Set up index.
2024-06-05 17:21:26,190:INFO:Initializing predict_model()
2024-06-05 17:21:26,190:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9A5550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:21:26,191:INFO:Checking exceptions
2024-06-05 17:21:26,191:INFO:Preloading libraries
2024-06-05 17:21:26,191:INFO:Set up data.
2024-06-05 17:21:26,194:INFO:Set up index.
2024-06-05 17:21:28,326:INFO:Initializing predict_model()
2024-06-05 17:21:28,326:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7D1D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98A480>)
2024-06-05 17:21:28,326:INFO:Checking exceptions
2024-06-05 17:21:28,326:INFO:Preloading libraries
2024-06-05 17:21:28,326:INFO:Set up data.
2024-06-05 17:21:28,331:INFO:Set up index.
2024-06-05 17:21:30,538:INFO:Initializing predict_model()
2024-06-05 17:21:30,538:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E46050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:21:30,538:INFO:Checking exceptions
2024-06-05 17:21:30,538:INFO:Preloading libraries
2024-06-05 17:21:30,538:INFO:Set up data.
2024-06-05 17:21:30,541:INFO:Set up index.
2024-06-05 17:21:32,692:INFO:Initializing predict_model()
2024-06-05 17:21:32,692:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E842D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 17:21:32,692:INFO:Checking exceptions
2024-06-05 17:21:32,692:INFO:Preloading libraries
2024-06-05 17:21:32,692:INFO:Set up data.
2024-06-05 17:21:32,695:INFO:Set up index.
2024-06-05 17:21:34,869:INFO:Initializing predict_model()
2024-06-05 17:21:34,871:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7FA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:21:34,871:INFO:Checking exceptions
2024-06-05 17:21:34,871:INFO:Preloading libraries
2024-06-05 17:21:34,871:INFO:Set up data.
2024-06-05 17:21:34,873:INFO:Set up index.
2024-06-05 17:21:37,025:INFO:Initializing predict_model()
2024-06-05 17:21:37,025:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E82310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 17:21:37,025:INFO:Checking exceptions
2024-06-05 17:21:37,025:INFO:Preloading libraries
2024-06-05 17:21:37,026:INFO:Set up data.
2024-06-05 17:21:37,028:INFO:Set up index.
2024-06-05 17:21:39,201:INFO:Initializing predict_model()
2024-06-05 17:21:39,201:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E85A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB989800>)
2024-06-05 17:21:39,201:INFO:Checking exceptions
2024-06-05 17:21:39,201:INFO:Preloading libraries
2024-06-05 17:21:39,201:INFO:Set up data.
2024-06-05 17:21:39,204:INFO:Set up index.
2024-06-05 17:21:41,361:INFO:Initializing predict_model()
2024-06-05 17:21:41,361:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7EA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:21:41,361:INFO:Checking exceptions
2024-06-05 17:21:41,361:INFO:Preloading libraries
2024-06-05 17:21:41,361:INFO:Set up data.
2024-06-05 17:21:41,364:INFO:Set up index.
2024-06-05 17:21:43,522:INFO:Initializing predict_model()
2024-06-05 17:21:43,522:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB996E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:21:43,522:INFO:Checking exceptions
2024-06-05 17:21:43,522:INFO:Preloading libraries
2024-06-05 17:21:43,522:INFO:Set up data.
2024-06-05 17:21:43,525:INFO:Set up index.
2024-06-05 17:21:45,682:INFO:Initializing predict_model()
2024-06-05 17:21:45,682:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9BDBD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:21:45,682:INFO:Checking exceptions
2024-06-05 17:21:45,682:INFO:Preloading libraries
2024-06-05 17:21:45,682:INFO:Set up data.
2024-06-05 17:21:45,685:INFO:Set up index.
2024-06-05 17:21:47,842:INFO:Initializing predict_model()
2024-06-05 17:21:47,842:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9A5550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:21:47,842:INFO:Checking exceptions
2024-06-05 17:21:47,842:INFO:Preloading libraries
2024-06-05 17:21:47,842:INFO:Set up data.
2024-06-05 17:21:47,845:INFO:Set up index.
2024-06-05 17:22:00,036:INFO:Initializing predict_model()
2024-06-05 17:22:00,037:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7E490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98A2A0>)
2024-06-05 17:22:00,037:INFO:Checking exceptions
2024-06-05 17:22:00,037:INFO:Preloading libraries
2024-06-05 17:22:00,037:INFO:Set up data.
2024-06-05 17:22:00,040:INFO:Set up index.
2024-06-05 17:22:02,294:INFO:Initializing predict_model()
2024-06-05 17:22:02,294:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E849D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:22:02,294:INFO:Checking exceptions
2024-06-05 17:22:02,294:INFO:Preloading libraries
2024-06-05 17:22:02,294:INFO:Set up data.
2024-06-05 17:22:02,297:INFO:Set up index.
2024-06-05 17:22:04,459:INFO:Initializing predict_model()
2024-06-05 17:22:04,459:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB977350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 17:22:04,459:INFO:Checking exceptions
2024-06-05 17:22:04,459:INFO:Preloading libraries
2024-06-05 17:22:04,459:INFO:Set up data.
2024-06-05 17:22:04,462:INFO:Set up index.
2024-06-05 17:22:06,615:INFO:Initializing predict_model()
2024-06-05 17:22:06,615:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB977910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:22:06,615:INFO:Checking exceptions
2024-06-05 17:22:06,615:INFO:Preloading libraries
2024-06-05 17:22:06,616:INFO:Set up data.
2024-06-05 17:22:06,618:INFO:Set up index.
2024-06-05 17:22:08,770:INFO:Initializing predict_model()
2024-06-05 17:22:08,770:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E83E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 17:22:08,770:INFO:Checking exceptions
2024-06-05 17:22:08,770:INFO:Preloading libraries
2024-06-05 17:22:08,770:INFO:Set up data.
2024-06-05 17:22:08,773:INFO:Set up index.
2024-06-05 17:22:10,949:INFO:Initializing predict_model()
2024-06-05 17:22:10,949:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E85E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98A980>)
2024-06-05 17:22:10,949:INFO:Checking exceptions
2024-06-05 17:22:10,949:INFO:Preloading libraries
2024-06-05 17:22:10,950:INFO:Set up data.
2024-06-05 17:22:10,952:INFO:Set up index.
2024-06-05 17:22:13,099:INFO:Initializing predict_model()
2024-06-05 17:22:13,099:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB97E250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:22:13,099:INFO:Checking exceptions
2024-06-05 17:22:13,099:INFO:Preloading libraries
2024-06-05 17:22:13,099:INFO:Set up data.
2024-06-05 17:22:13,102:INFO:Set up index.
2024-06-05 17:22:15,268:INFO:Initializing predict_model()
2024-06-05 17:22:15,268:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB995B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:22:15,268:INFO:Checking exceptions
2024-06-05 17:22:15,268:INFO:Preloading libraries
2024-06-05 17:22:15,268:INFO:Set up data.
2024-06-05 17:22:15,270:INFO:Set up index.
2024-06-05 17:22:17,453:INFO:Initializing predict_model()
2024-06-05 17:22:17,453:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9A4390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:22:17,453:INFO:Checking exceptions
2024-06-05 17:22:17,453:INFO:Preloading libraries
2024-06-05 17:22:17,453:INFO:Set up data.
2024-06-05 17:22:17,460:INFO:Set up index.
2024-06-05 17:22:19,625:INFO:Initializing predict_model()
2024-06-05 17:22:19,625:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E7EAD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:22:19,625:INFO:Checking exceptions
2024-06-05 17:22:19,625:INFO:Preloading libraries
2024-06-05 17:22:19,625:INFO:Set up data.
2024-06-05 17:22:19,627:INFO:Set up index.
2024-06-05 17:22:21,773:INFO:Initializing predict_model()
2024-06-05 17:22:21,773:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB97EAD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB989D00>)
2024-06-05 17:22:21,775:INFO:Checking exceptions
2024-06-05 17:22:21,775:INFO:Preloading libraries
2024-06-05 17:22:21,775:INFO:Set up data.
2024-06-05 17:22:21,777:INFO:Set up index.
2024-06-05 17:22:33,975:INFO:Initializing predict_model()
2024-06-05 17:22:33,976:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB976650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:22:33,976:INFO:Checking exceptions
2024-06-05 17:22:33,976:INFO:Preloading libraries
2024-06-05 17:22:33,976:INFO:Set up data.
2024-06-05 17:22:33,979:INFO:Set up index.
2024-06-05 17:22:36,179:INFO:Initializing predict_model()
2024-06-05 17:22:36,179:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4F1E84090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 17:22:36,179:INFO:Checking exceptions
2024-06-05 17:22:36,179:INFO:Preloading libraries
2024-06-05 17:22:36,179:INFO:Set up data.
2024-06-05 17:22:36,182:INFO:Set up index.
2024-06-05 17:22:38,344:INFO:Initializing predict_model()
2024-06-05 17:22:38,344:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB976C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:22:38,344:INFO:Checking exceptions
2024-06-05 17:22:38,344:INFO:Preloading libraries
2024-06-05 17:22:38,344:INFO:Set up data.
2024-06-05 17:22:38,349:INFO:Set up index.
2024-06-05 17:22:40,549:INFO:Initializing predict_model()
2024-06-05 17:22:40,549:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9AD7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AE80>)
2024-06-05 17:22:40,549:INFO:Checking exceptions
2024-06-05 17:22:40,549:INFO:Preloading libraries
2024-06-05 17:22:40,549:INFO:Set up data.
2024-06-05 17:22:40,552:INFO:Set up index.
2024-06-05 17:22:42,716:INFO:Initializing predict_model()
2024-06-05 17:22:42,716:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9A6710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB989440>)
2024-06-05 17:22:42,716:INFO:Checking exceptions
2024-06-05 17:22:42,716:INFO:Preloading libraries
2024-06-05 17:22:42,716:INFO:Set up data.
2024-06-05 17:22:42,719:INFO:Set up index.
2024-06-05 17:22:44,871:INFO:Initializing predict_model()
2024-06-05 17:22:44,871:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB976FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:22:44,871:INFO:Checking exceptions
2024-06-05 17:22:44,871:INFO:Preloading libraries
2024-06-05 17:22:44,871:INFO:Set up data.
2024-06-05 17:22:44,874:INFO:Set up index.
2024-06-05 17:22:47,026:INFO:Initializing predict_model()
2024-06-05 17:22:47,026:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB9AC4D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:22:47,026:INFO:Checking exceptions
2024-06-05 17:22:47,026:INFO:Preloading libraries
2024-06-05 17:22:47,027:INFO:Set up data.
2024-06-05 17:22:47,029:INFO:Set up index.
2024-06-05 17:22:49,228:INFO:Initializing predict_model()
2024-06-05 17:22:49,229:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB97EF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:22:49,229:INFO:Checking exceptions
2024-06-05 17:22:49,229:INFO:Preloading libraries
2024-06-05 17:22:49,230:INFO:Set up data.
2024-06-05 17:22:49,236:INFO:Set up index.
2024-06-05 17:22:51,395:INFO:Initializing predict_model()
2024-06-05 17:22:51,395:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB977750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AF20>)
2024-06-05 17:22:51,395:INFO:Checking exceptions
2024-06-05 17:22:51,395:INFO:Preloading libraries
2024-06-05 17:22:51,395:INFO:Set up data.
2024-06-05 17:22:51,398:INFO:Set up index.
2024-06-05 17:22:53,528:INFO:Initializing predict_model()
2024-06-05 17:22:53,528:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB97E690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4EB98A660>)
2024-06-05 17:22:53,528:INFO:Checking exceptions
2024-06-05 17:22:53,528:INFO:Preloading libraries
2024-06-05 17:22:53,529:INFO:Set up data.
2024-06-05 17:22:53,531:INFO:Set up index.
2024-06-05 17:22:55,697:INFO:Initializing predict_model()
2024-06-05 17:22:55,697:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F4EB994C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4F1E5AFC0>)
2024-06-05 17:22:55,697:INFO:Checking exceptions
2024-06-05 17:22:55,697:INFO:Preloading libraries
2024-06-05 17:22:55,698:INFO:Set up data.
2024-06-05 17:22:55,700:INFO:Set up index.
2024-06-05 17:30:13,201:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 17:30:13,201:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 17:30:13,201:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 17:30:13,201:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 17:30:13,474:INFO:Initializing load_model()
2024-06-05 17:30:13,474:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-05 17:30:13,479:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 17:30:13,480:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 17:30:13,481:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 17:30:13,481:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 17:30:15,714:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 17:30:15,864:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-05 19:14:30,954:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 19:14:30,954:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 19:14:30,955:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 19:14:30,955:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-05 19:14:32,200:INFO:Initializing load_model()
2024-06-05 19:14:32,200:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-05 19:14:32,219:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 19:14:32,219:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 19:14:32,220:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 19:14:32,220:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 19:14:34,943:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-05 19:14:35,420:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-06 01:30:31,025:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 01:30:31,026:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 01:30:31,026:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 01:30:31,027:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 01:30:33,896:INFO:Initializing load_model()
2024-06-06 01:30:33,896:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-06 01:30:33,934:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 01:30:33,935:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 01:30:33,937:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 01:30:33,938:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 01:30:38,011:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 01:30:38,723:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-06 01:30:44,932:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 01:30:44,932:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 01:30:44,932:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 01:30:44,932:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 01:30:45,412:INFO:Initializing load_model()
2024-06-06 01:30:45,412:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-06 01:30:45,415:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 01:30:45,416:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 01:30:45,417:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 01:30:45,417:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 01:30:47,607:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 01:30:47,659:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-06 13:56:13,128:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 13:56:13,129:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 13:56:13,129:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 13:56:13,129:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 13:56:15,167:INFO:Initializing load_model()
2024-06-06 13:56:15,167:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-06 13:56:15,194:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 13:56:15,195:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 13:56:15,196:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 13:56:15,196:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 13:56:18,827:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 13:56:19,598:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-06 13:56:23,948:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 13:56:23,948:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 13:56:23,948:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 13:56:23,948:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 13:56:24,294:INFO:Initializing load_model()
2024-06-06 13:56:24,294:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-06 13:56:24,297:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 13:56:24,297:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 13:56:24,298:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 13:56:24,298:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 13:56:26,178:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 13:56:26,504:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-06 14:05:06,942:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 14:05:06,942:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 14:05:06,942:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 14:05:06,942:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 14:05:07,402:INFO:Initializing load_model()
2024-06-06 14:05:07,402:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-06 14:05:07,406:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 14:05:07,407:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 14:05:07,407:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 14:05:07,408:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 14:05:10,917:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 14:05:11,324:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-06 14:11:13,889:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 14:11:13,890:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 14:11:13,890:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 14:11:13,890:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 14:11:14,186:INFO:Initializing load_model()
2024-06-06 14:11:14,186:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-06 14:11:14,190:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 14:11:14,191:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 14:11:14,192:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 14:11:14,192:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 14:11:17,880:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 14:11:18,031:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-06 14:30:48,232:INFO:Initializing predict_model()
2024-06-06 14:30:48,234:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D8324BC890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D8158D9580>)
2024-06-06 14:30:48,234:INFO:Checking exceptions
2024-06-06 14:30:48,234:INFO:Preloading libraries
2024-06-06 14:30:48,249:INFO:Set up data.
2024-06-06 14:30:48,331:INFO:Set up index.
2024-06-06 14:30:51,750:INFO:Initializing predict_model()
2024-06-06 14:30:51,750:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D8329FD8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D879E067A0>)
2024-06-06 14:30:51,750:INFO:Checking exceptions
2024-06-06 14:30:51,751:INFO:Preloading libraries
2024-06-06 14:30:51,751:INFO:Set up data.
2024-06-06 14:30:51,755:INFO:Set up index.
2024-06-06 14:30:53,932:INFO:Initializing predict_model()
2024-06-06 14:30:53,932:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A17A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1A520>)
2024-06-06 14:30:53,932:INFO:Checking exceptions
2024-06-06 14:30:53,932:INFO:Preloading libraries
2024-06-06 14:30:53,932:INFO:Set up data.
2024-06-06 14:30:53,935:INFO:Set up index.
2024-06-06 14:30:56,095:INFO:Initializing predict_model()
2024-06-06 14:30:56,095:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A09550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A19EE0>)
2024-06-06 14:30:56,095:INFO:Checking exceptions
2024-06-06 14:30:56,095:INFO:Preloading libraries
2024-06-06 14:30:56,095:INFO:Set up data.
2024-06-06 14:30:56,098:INFO:Set up index.
2024-06-06 14:30:58,274:INFO:Initializing predict_model()
2024-06-06 14:30:58,274:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A2C310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1ADE0>)
2024-06-06 14:30:58,274:INFO:Checking exceptions
2024-06-06 14:30:58,274:INFO:Preloading libraries
2024-06-06 14:30:58,275:INFO:Set up data.
2024-06-06 14:30:58,278:INFO:Set up index.
2024-06-06 14:31:00,450:INFO:Initializing predict_model()
2024-06-06 14:31:00,450:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D8329FFED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1A8E0>)
2024-06-06 14:31:00,450:INFO:Checking exceptions
2024-06-06 14:31:00,450:INFO:Preloading libraries
2024-06-06 14:31:00,451:INFO:Set up data.
2024-06-06 14:31:00,454:INFO:Set up index.
2024-06-06 14:31:02,661:INFO:Initializing predict_model()
2024-06-06 14:31:02,661:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D8324BEC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A18360>)
2024-06-06 14:31:02,661:INFO:Checking exceptions
2024-06-06 14:31:02,661:INFO:Preloading libraries
2024-06-06 14:31:02,662:INFO:Set up data.
2024-06-06 14:31:02,665:INFO:Set up index.
2024-06-06 14:31:04,845:INFO:Initializing predict_model()
2024-06-06 14:31:04,845:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A343D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A19F80>)
2024-06-06 14:31:04,845:INFO:Checking exceptions
2024-06-06 14:31:04,845:INFO:Preloading libraries
2024-06-06 14:31:04,845:INFO:Set up data.
2024-06-06 14:31:04,847:INFO:Set up index.
2024-06-06 14:31:07,003:INFO:Initializing predict_model()
2024-06-06 14:31:07,003:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D8324B45D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1A8E0>)
2024-06-06 14:31:07,003:INFO:Checking exceptions
2024-06-06 14:31:07,003:INFO:Preloading libraries
2024-06-06 14:31:07,003:INFO:Set up data.
2024-06-06 14:31:07,007:INFO:Set up index.
2024-06-06 14:31:09,171:INFO:Initializing predict_model()
2024-06-06 14:31:09,172:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A2DE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1B560>)
2024-06-06 14:31:09,172:INFO:Checking exceptions
2024-06-06 14:31:09,172:INFO:Preloading libraries
2024-06-06 14:31:09,172:INFO:Set up data.
2024-06-06 14:31:09,176:INFO:Set up index.
2024-06-06 14:31:11,396:INFO:Initializing predict_model()
2024-06-06 14:31:11,396:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A0B390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A19A80>)
2024-06-06 14:31:11,396:INFO:Checking exceptions
2024-06-06 14:31:11,396:INFO:Preloading libraries
2024-06-06 14:31:11,396:INFO:Set up data.
2024-06-06 14:31:11,399:INFO:Set up index.
2024-06-06 14:31:23,605:INFO:Initializing predict_model()
2024-06-06 14:31:23,605:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A163D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1B4C0>)
2024-06-06 14:31:23,605:INFO:Checking exceptions
2024-06-06 14:31:23,605:INFO:Preloading libraries
2024-06-06 14:31:23,605:INFO:Set up data.
2024-06-06 14:31:23,609:INFO:Set up index.
2024-06-06 14:31:25,767:INFO:Initializing predict_model()
2024-06-06 14:31:25,767:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A36050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1AD40>)
2024-06-06 14:31:25,767:INFO:Checking exceptions
2024-06-06 14:31:25,767:INFO:Preloading libraries
2024-06-06 14:31:25,767:INFO:Set up data.
2024-06-06 14:31:25,770:INFO:Set up index.
2024-06-06 14:31:27,897:INFO:Initializing predict_model()
2024-06-06 14:31:27,897:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A17E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A19EE0>)
2024-06-06 14:31:27,897:INFO:Checking exceptions
2024-06-06 14:31:27,897:INFO:Preloading libraries
2024-06-06 14:31:27,897:INFO:Set up data.
2024-06-06 14:31:27,901:INFO:Set up index.
2024-06-06 14:31:30,073:INFO:Initializing predict_model()
2024-06-06 14:31:30,073:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A2CF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1A2A0>)
2024-06-06 14:31:30,073:INFO:Checking exceptions
2024-06-06 14:31:30,073:INFO:Preloading libraries
2024-06-06 14:31:30,073:INFO:Set up data.
2024-06-06 14:31:30,077:INFO:Set up index.
2024-06-06 14:31:32,228:INFO:Initializing predict_model()
2024-06-06 14:31:32,228:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A2F7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1A340>)
2024-06-06 14:31:32,228:INFO:Checking exceptions
2024-06-06 14:31:32,228:INFO:Preloading libraries
2024-06-06 14:31:32,228:INFO:Set up data.
2024-06-06 14:31:32,232:INFO:Set up index.
2024-06-06 14:31:34,382:INFO:Initializing predict_model()
2024-06-06 14:31:34,382:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A37310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1B6A0>)
2024-06-06 14:31:34,382:INFO:Checking exceptions
2024-06-06 14:31:34,382:INFO:Preloading libraries
2024-06-06 14:31:34,382:INFO:Set up data.
2024-06-06 14:31:34,384:INFO:Set up index.
2024-06-06 14:31:36,556:INFO:Initializing predict_model()
2024-06-06 14:31:36,556:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A36650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1B2E0>)
2024-06-06 14:31:36,556:INFO:Checking exceptions
2024-06-06 14:31:36,556:INFO:Preloading libraries
2024-06-06 14:31:36,556:INFO:Set up data.
2024-06-06 14:31:36,559:INFO:Set up index.
2024-06-06 14:31:38,794:INFO:Initializing predict_model()
2024-06-06 14:31:38,794:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A2C5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1A8E0>)
2024-06-06 14:31:38,794:INFO:Checking exceptions
2024-06-06 14:31:38,794:INFO:Preloading libraries
2024-06-06 14:31:38,794:INFO:Set up data.
2024-06-06 14:31:38,797:INFO:Set up index.
2024-06-06 14:31:40,964:INFO:Initializing predict_model()
2024-06-06 14:31:40,964:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A2E310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A184A0>)
2024-06-06 14:31:40,965:INFO:Checking exceptions
2024-06-06 14:31:40,965:INFO:Preloading libraries
2024-06-06 14:31:40,965:INFO:Set up data.
2024-06-06 14:31:40,968:INFO:Set up index.
2024-06-06 14:31:43,148:INFO:Initializing predict_model()
2024-06-06 14:31:43,149:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A20450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A180E0>)
2024-06-06 14:31:43,149:INFO:Checking exceptions
2024-06-06 14:31:43,149:INFO:Preloading libraries
2024-06-06 14:31:43,149:INFO:Set up data.
2024-06-06 14:31:43,153:INFO:Set up index.
2024-06-06 14:31:45,320:INFO:Initializing predict_model()
2024-06-06 14:31:45,320:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A2D510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1A480>)
2024-06-06 14:31:45,320:INFO:Checking exceptions
2024-06-06 14:31:45,320:INFO:Preloading libraries
2024-06-06 14:31:45,321:INFO:Set up data.
2024-06-06 14:31:45,324:INFO:Set up index.
2024-06-06 14:31:57,519:INFO:Initializing predict_model()
2024-06-06 14:31:57,519:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D8324B7B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A18180>)
2024-06-06 14:31:57,519:INFO:Checking exceptions
2024-06-06 14:31:57,520:INFO:Preloading libraries
2024-06-06 14:31:57,520:INFO:Set up data.
2024-06-06 14:31:57,522:INFO:Set up index.
2024-06-06 14:31:59,683:INFO:Initializing predict_model()
2024-06-06 14:31:59,683:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A16190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A18540>)
2024-06-06 14:31:59,683:INFO:Checking exceptions
2024-06-06 14:31:59,683:INFO:Preloading libraries
2024-06-06 14:31:59,684:INFO:Set up data.
2024-06-06 14:31:59,688:INFO:Set up index.
2024-06-06 14:32:01,830:INFO:Initializing predict_model()
2024-06-06 14:32:01,830:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A37250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A19940>)
2024-06-06 14:32:01,830:INFO:Checking exceptions
2024-06-06 14:32:01,830:INFO:Preloading libraries
2024-06-06 14:32:01,830:INFO:Set up data.
2024-06-06 14:32:01,834:INFO:Set up index.
2024-06-06 14:32:04,052:INFO:Initializing predict_model()
2024-06-06 14:32:04,052:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A16310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1A8E0>)
2024-06-06 14:32:04,052:INFO:Checking exceptions
2024-06-06 14:32:04,052:INFO:Preloading libraries
2024-06-06 14:32:04,053:INFO:Set up data.
2024-06-06 14:32:04,056:INFO:Set up index.
2024-06-06 14:32:06,212:INFO:Initializing predict_model()
2024-06-06 14:32:06,212:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A21BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1A840>)
2024-06-06 14:32:06,212:INFO:Checking exceptions
2024-06-06 14:32:06,213:INFO:Preloading libraries
2024-06-06 14:32:06,213:INFO:Set up data.
2024-06-06 14:32:06,216:INFO:Set up index.
2024-06-06 14:32:08,369:INFO:Initializing predict_model()
2024-06-06 14:32:08,369:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A21210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A182C0>)
2024-06-06 14:32:08,369:INFO:Checking exceptions
2024-06-06 14:32:08,369:INFO:Preloading libraries
2024-06-06 14:32:08,370:INFO:Set up data.
2024-06-06 14:32:08,372:INFO:Set up index.
2024-06-06 14:32:10,521:INFO:Initializing predict_model()
2024-06-06 14:32:10,521:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832845E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1ADE0>)
2024-06-06 14:32:10,521:INFO:Checking exceptions
2024-06-06 14:32:10,521:INFO:Preloading libraries
2024-06-06 14:32:10,522:INFO:Set up data.
2024-06-06 14:32:10,525:INFO:Set up index.
2024-06-06 14:32:12,688:INFO:Initializing predict_model()
2024-06-06 14:32:12,688:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A16590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1B380>)
2024-06-06 14:32:12,688:INFO:Checking exceptions
2024-06-06 14:32:12,688:INFO:Preloading libraries
2024-06-06 14:32:12,689:INFO:Set up data.
2024-06-06 14:32:12,691:INFO:Set up index.
2024-06-06 14:32:14,865:INFO:Initializing predict_model()
2024-06-06 14:32:14,865:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A2D3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1B380>)
2024-06-06 14:32:14,865:INFO:Checking exceptions
2024-06-06 14:32:14,865:INFO:Preloading libraries
2024-06-06 14:32:14,865:INFO:Set up data.
2024-06-06 14:32:14,868:INFO:Set up index.
2024-06-06 14:32:17,056:INFO:Initializing predict_model()
2024-06-06 14:32:17,056:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A17550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1ADE0>)
2024-06-06 14:32:17,056:INFO:Checking exceptions
2024-06-06 14:32:17,056:INFO:Preloading libraries
2024-06-06 14:32:17,056:INFO:Set up data.
2024-06-06 14:32:17,059:INFO:Set up index.
2024-06-06 14:32:19,205:INFO:Initializing predict_model()
2024-06-06 14:32:19,206:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A20450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A18540>)
2024-06-06 14:32:19,206:INFO:Checking exceptions
2024-06-06 14:32:19,206:INFO:Preloading libraries
2024-06-06 14:32:19,206:INFO:Set up data.
2024-06-06 14:32:19,209:INFO:Set up index.
2024-06-06 14:32:31,416:INFO:Initializing predict_model()
2024-06-06 14:32:31,416:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A08250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A18720>)
2024-06-06 14:32:31,416:INFO:Checking exceptions
2024-06-06 14:32:31,416:INFO:Preloading libraries
2024-06-06 14:32:31,416:INFO:Set up data.
2024-06-06 14:32:31,419:INFO:Set up index.
2024-06-06 14:32:33,601:INFO:Initializing predict_model()
2024-06-06 14:32:33,602:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A20C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1AAC0>)
2024-06-06 14:32:33,602:INFO:Checking exceptions
2024-06-06 14:32:33,602:INFO:Preloading libraries
2024-06-06 14:32:33,602:INFO:Set up data.
2024-06-06 14:32:33,607:INFO:Set up index.
2024-06-06 14:32:35,820:INFO:Initializing predict_model()
2024-06-06 14:32:35,820:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A2EF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A19940>)
2024-06-06 14:32:35,820:INFO:Checking exceptions
2024-06-06 14:32:35,820:INFO:Preloading libraries
2024-06-06 14:32:35,820:INFO:Set up data.
2024-06-06 14:32:35,823:INFO:Set up index.
2024-06-06 14:32:37,989:INFO:Initializing predict_model()
2024-06-06 14:32:37,989:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A21AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A19A80>)
2024-06-06 14:32:37,989:INFO:Checking exceptions
2024-06-06 14:32:37,989:INFO:Preloading libraries
2024-06-06 14:32:37,989:INFO:Set up data.
2024-06-06 14:32:37,995:INFO:Set up index.
2024-06-06 14:32:40,150:INFO:Initializing predict_model()
2024-06-06 14:32:40,150:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A37710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1B380>)
2024-06-06 14:32:40,150:INFO:Checking exceptions
2024-06-06 14:32:40,150:INFO:Preloading libraries
2024-06-06 14:32:40,150:INFO:Set up data.
2024-06-06 14:32:40,153:INFO:Set up index.
2024-06-06 14:32:42,328:INFO:Initializing predict_model()
2024-06-06 14:32:42,329:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D8329FDFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1A020>)
2024-06-06 14:32:42,329:INFO:Checking exceptions
2024-06-06 14:32:42,329:INFO:Preloading libraries
2024-06-06 14:32:42,329:INFO:Set up data.
2024-06-06 14:32:42,331:INFO:Set up index.
2024-06-06 14:32:44,498:INFO:Initializing predict_model()
2024-06-06 14:32:44,498:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A2DE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1B060>)
2024-06-06 14:32:44,498:INFO:Checking exceptions
2024-06-06 14:32:44,498:INFO:Preloading libraries
2024-06-06 14:32:44,498:INFO:Set up data.
2024-06-06 14:32:44,503:INFO:Set up index.
2024-06-06 14:32:46,677:INFO:Initializing predict_model()
2024-06-06 14:32:46,677:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A36710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1B060>)
2024-06-06 14:32:46,677:INFO:Checking exceptions
2024-06-06 14:32:46,677:INFO:Preloading libraries
2024-06-06 14:32:46,678:INFO:Set up data.
2024-06-06 14:32:46,681:INFO:Set up index.
2024-06-06 14:32:48,861:INFO:Initializing predict_model()
2024-06-06 14:32:48,861:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A17A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1A2A0>)
2024-06-06 14:32:48,861:INFO:Checking exceptions
2024-06-06 14:32:48,862:INFO:Preloading libraries
2024-06-06 14:32:48,862:INFO:Set up data.
2024-06-06 14:32:48,865:INFO:Set up index.
2024-06-06 14:32:51,054:INFO:Initializing predict_model()
2024-06-06 14:32:51,054:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A17ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1A200>)
2024-06-06 14:32:51,054:INFO:Checking exceptions
2024-06-06 14:32:51,054:INFO:Preloading libraries
2024-06-06 14:32:51,054:INFO:Set up data.
2024-06-06 14:32:51,057:INFO:Set up index.
2024-06-06 14:32:53,253:INFO:Initializing predict_model()
2024-06-06 14:32:53,253:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D8329FE790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1B420>)
2024-06-06 14:32:53,253:INFO:Checking exceptions
2024-06-06 14:32:53,253:INFO:Preloading libraries
2024-06-06 14:32:53,254:INFO:Set up data.
2024-06-06 14:32:53,256:INFO:Set up index.
2024-06-06 14:33:05,610:INFO:Initializing predict_model()
2024-06-06 14:33:05,610:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A16C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A19B20>)
2024-06-06 14:33:05,610:INFO:Checking exceptions
2024-06-06 14:33:05,611:INFO:Preloading libraries
2024-06-06 14:33:05,611:INFO:Set up data.
2024-06-06 14:33:05,613:INFO:Set up index.
2024-06-06 14:33:07,771:INFO:Initializing predict_model()
2024-06-06 14:33:07,771:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A08190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1A7A0>)
2024-06-06 14:33:07,772:INFO:Checking exceptions
2024-06-06 14:33:07,772:INFO:Preloading libraries
2024-06-06 14:33:07,772:INFO:Set up data.
2024-06-06 14:33:07,775:INFO:Set up index.
2024-06-06 14:33:09,925:INFO:Initializing predict_model()
2024-06-06 14:33:09,926:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A370D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A19DA0>)
2024-06-06 14:33:09,926:INFO:Checking exceptions
2024-06-06 14:33:09,926:INFO:Preloading libraries
2024-06-06 14:33:09,926:INFO:Set up data.
2024-06-06 14:33:09,928:INFO:Set up index.
2024-06-06 14:33:12,088:INFO:Initializing predict_model()
2024-06-06 14:33:12,088:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A34C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1B6A0>)
2024-06-06 14:33:12,088:INFO:Checking exceptions
2024-06-06 14:33:12,088:INFO:Preloading libraries
2024-06-06 14:33:12,088:INFO:Set up data.
2024-06-06 14:33:12,092:INFO:Set up index.
2024-06-06 14:33:14,231:INFO:Initializing predict_model()
2024-06-06 14:33:14,231:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A2F850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1B600>)
2024-06-06 14:33:14,231:INFO:Checking exceptions
2024-06-06 14:33:14,231:INFO:Preloading libraries
2024-06-06 14:33:14,231:INFO:Set up data.
2024-06-06 14:33:14,234:INFO:Set up index.
2024-06-06 14:33:16,409:INFO:Initializing predict_model()
2024-06-06 14:33:16,410:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A15ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A19B20>)
2024-06-06 14:33:16,410:INFO:Checking exceptions
2024-06-06 14:33:16,410:INFO:Preloading libraries
2024-06-06 14:33:16,410:INFO:Set up data.
2024-06-06 14:33:16,412:INFO:Set up index.
2024-06-06 14:33:18,578:INFO:Initializing predict_model()
2024-06-06 14:33:18,578:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A367D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A19B20>)
2024-06-06 14:33:18,578:INFO:Checking exceptions
2024-06-06 14:33:18,578:INFO:Preloading libraries
2024-06-06 14:33:18,578:INFO:Set up data.
2024-06-06 14:33:18,581:INFO:Set up index.
2024-06-06 14:33:20,752:INFO:Initializing predict_model()
2024-06-06 14:33:20,752:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A08650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1A8E0>)
2024-06-06 14:33:20,752:INFO:Checking exceptions
2024-06-06 14:33:20,752:INFO:Preloading libraries
2024-06-06 14:33:20,753:INFO:Set up data.
2024-06-06 14:33:20,755:INFO:Set up index.
2024-06-06 14:33:22,923:INFO:Initializing predict_model()
2024-06-06 14:33:22,923:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D8329FC110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1B7E0>)
2024-06-06 14:33:22,923:INFO:Checking exceptions
2024-06-06 14:33:22,923:INFO:Preloading libraries
2024-06-06 14:33:22,924:INFO:Set up data.
2024-06-06 14:33:22,926:INFO:Set up index.
2024-06-06 14:33:25,091:INFO:Initializing predict_model()
2024-06-06 14:33:25,091:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D832A21B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1B060>)
2024-06-06 14:33:25,091:INFO:Checking exceptions
2024-06-06 14:33:25,091:INFO:Preloading libraries
2024-06-06 14:33:25,091:INFO:Set up data.
2024-06-06 14:33:25,094:INFO:Set up index.
2024-06-06 14:33:27,262:INFO:Initializing predict_model()
2024-06-06 14:33:27,262:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D8329FD590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D832A1B420>)
2024-06-06 14:33:27,262:INFO:Checking exceptions
2024-06-06 14:33:27,262:INFO:Preloading libraries
2024-06-06 14:33:27,262:INFO:Set up data.
2024-06-06 14:33:27,264:INFO:Set up index.
2024-06-06 14:52:29,670:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 14:52:29,671:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 14:52:29,671:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 14:52:29,671:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 14:52:30,129:INFO:Initializing load_model()
2024-06-06 14:52:30,129:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-06 14:52:30,138:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 14:52:30,139:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 14:52:30,140:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 14:52:30,141:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 14:52:36,929:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 14:52:37,072:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-06 14:56:46,674:INFO:Initializing predict_model()
2024-06-06 14:56:46,675:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E104BA7910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E10F25B100>)
2024-06-06 14:56:46,675:INFO:Checking exceptions
2024-06-06 14:56:46,675:INFO:Preloading libraries
2024-06-06 14:56:46,691:INFO:Set up data.
2024-06-06 14:56:46,738:INFO:Set up index.
2024-06-06 14:56:48,839:INFO:Initializing predict_model()
2024-06-06 14:56:48,839:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E10F4F6CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E10F2DAB60>)
2024-06-06 14:56:48,839:INFO:Checking exceptions
2024-06-06 14:56:48,839:INFO:Preloading libraries
2024-06-06 14:56:48,839:INFO:Set up data.
2024-06-06 14:56:48,842:INFO:Set up index.
2024-06-06 14:56:50,901:INFO:Initializing predict_model()
2024-06-06 14:56:50,902:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E10F240DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E10F2DAAC0>)
2024-06-06 14:56:50,902:INFO:Checking exceptions
2024-06-06 14:56:50,902:INFO:Preloading libraries
2024-06-06 14:56:50,902:INFO:Set up data.
2024-06-06 14:56:50,904:INFO:Set up index.
2024-06-06 14:56:52,969:INFO:Initializing predict_model()
2024-06-06 14:56:52,969:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E10F50B2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E10F2DB240>)
2024-06-06 14:56:52,969:INFO:Checking exceptions
2024-06-06 14:56:52,969:INFO:Preloading libraries
2024-06-06 14:56:52,969:INFO:Set up data.
2024-06-06 14:56:53,024:INFO:Set up index.
2024-06-06 14:56:55,093:INFO:Initializing predict_model()
2024-06-06 14:56:55,093:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E10F50B050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E10F2DB2E0>)
2024-06-06 14:56:55,093:INFO:Checking exceptions
2024-06-06 14:56:55,093:INFO:Preloading libraries
2024-06-06 14:56:55,093:INFO:Set up data.
2024-06-06 14:56:55,095:INFO:Set up index.
2024-06-06 14:56:57,153:INFO:Initializing predict_model()
2024-06-06 14:56:57,154:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E10F4F6710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E10F2DAB60>)
2024-06-06 14:56:57,154:INFO:Checking exceptions
2024-06-06 14:56:57,154:INFO:Preloading libraries
2024-06-06 14:56:57,154:INFO:Set up data.
2024-06-06 14:56:57,156:INFO:Set up index.
2024-06-06 14:56:59,937:INFO:Initializing predict_model()
2024-06-06 14:56:59,937:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E10F513950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E10F2DB880>)
2024-06-06 14:56:59,937:INFO:Checking exceptions
2024-06-06 14:56:59,937:INFO:Preloading libraries
2024-06-06 14:56:59,938:INFO:Set up data.
2024-06-06 14:56:59,940:INFO:Set up index.
2024-06-06 14:57:01,998:INFO:Initializing predict_model()
2024-06-06 14:57:01,998:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E104B74BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E1681D5580>)
2024-06-06 14:57:01,998:INFO:Checking exceptions
2024-06-06 14:57:01,998:INFO:Preloading libraries
2024-06-06 14:57:01,998:INFO:Set up data.
2024-06-06 14:57:02,000:INFO:Set up index.
2024-06-06 14:57:04,063:INFO:Initializing predict_model()
2024-06-06 14:57:04,063:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E104B82B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E103F028E0>)
2024-06-06 14:57:04,063:INFO:Checking exceptions
2024-06-06 14:57:04,063:INFO:Preloading libraries
2024-06-06 14:57:04,064:INFO:Set up data.
2024-06-06 14:57:04,065:INFO:Set up index.
2024-06-06 14:57:16,189:INFO:Initializing predict_model()
2024-06-06 14:57:16,189:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E10F50A210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E10F2DB880>)
2024-06-06 14:57:16,189:INFO:Checking exceptions
2024-06-06 14:57:16,189:INFO:Preloading libraries
2024-06-06 14:57:16,189:INFO:Set up data.
2024-06-06 14:57:16,192:INFO:Set up index.
2024-06-06 14:57:18,243:INFO:Initializing predict_model()
2024-06-06 14:57:18,243:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E10F50B890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E1681D5580>)
2024-06-06 14:57:18,243:INFO:Checking exceptions
2024-06-06 14:57:18,243:INFO:Preloading libraries
2024-06-06 14:57:18,243:INFO:Set up data.
2024-06-06 14:57:18,245:INFO:Set up index.
2024-06-06 14:57:20,293:INFO:Initializing predict_model()
2024-06-06 14:57:20,293:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E104BAE950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E10F2DB7E0>)
2024-06-06 14:57:20,293:INFO:Checking exceptions
2024-06-06 14:57:20,293:INFO:Preloading libraries
2024-06-06 14:57:20,293:INFO:Set up data.
2024-06-06 14:57:20,295:INFO:Set up index.
2024-06-06 14:57:22,346:INFO:Initializing predict_model()
2024-06-06 14:57:22,346:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E10F512210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E10F2DADE0>)
2024-06-06 14:57:22,346:INFO:Checking exceptions
2024-06-06 14:57:22,346:INFO:Preloading libraries
2024-06-06 14:57:22,347:INFO:Set up data.
2024-06-06 14:57:22,348:INFO:Set up index.
2024-06-06 14:57:24,423:INFO:Initializing predict_model()
2024-06-06 14:57:24,423:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E104B82B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E10F2DB100>)
2024-06-06 14:57:24,423:INFO:Checking exceptions
2024-06-06 14:57:24,423:INFO:Preloading libraries
2024-06-06 14:57:24,423:INFO:Set up data.
2024-06-06 14:57:24,425:INFO:Set up index.
2024-06-06 14:59:55,901:INFO:Initializing predict_model()
2024-06-06 14:59:55,904:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E10F508310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E10F2DB380>)
2024-06-06 14:59:55,904:INFO:Checking exceptions
2024-06-06 14:59:55,904:INFO:Preloading libraries
2024-06-06 14:59:55,915:INFO:Set up data.
2024-06-06 14:59:55,934:INFO:Set up index.
2024-06-06 14:59:58,013:INFO:Initializing predict_model()
2024-06-06 14:59:58,013:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E104BBF510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E10F25AF20>)
2024-06-06 14:59:58,013:INFO:Checking exceptions
2024-06-06 14:59:58,013:INFO:Preloading libraries
2024-06-06 14:59:58,013:INFO:Set up data.
2024-06-06 14:59:58,017:INFO:Set up index.
2024-06-06 15:00:00,075:INFO:Initializing predict_model()
2024-06-06 15:00:00,075:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E104B96750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E10F2DB4C0>)
2024-06-06 15:00:00,075:INFO:Checking exceptions
2024-06-06 15:00:00,075:INFO:Preloading libraries
2024-06-06 15:00:00,075:INFO:Set up data.
2024-06-06 15:00:00,078:INFO:Set up index.
2024-06-06 15:00:02,147:INFO:Initializing predict_model()
2024-06-06 15:00:02,147:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E10F5145D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E10F2DB740>)
2024-06-06 15:00:02,147:INFO:Checking exceptions
2024-06-06 15:00:02,147:INFO:Preloading libraries
2024-06-06 15:00:02,148:INFO:Set up data.
2024-06-06 15:00:02,151:INFO:Set up index.
2024-06-06 15:00:19,348:INFO:Initializing predict_model()
2024-06-06 15:00:19,348:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E104BA5FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E103F028E0>)
2024-06-06 15:00:19,348:INFO:Checking exceptions
2024-06-06 15:00:19,348:INFO:Preloading libraries
2024-06-06 15:00:19,348:INFO:Set up data.
2024-06-06 15:00:19,351:INFO:Set up index.
2024-06-06 15:00:21,420:INFO:Initializing predict_model()
2024-06-06 15:00:21,420:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E10F508890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E10F2DBB00>)
2024-06-06 15:00:21,420:INFO:Checking exceptions
2024-06-06 15:00:21,420:INFO:Preloading libraries
2024-06-06 15:00:21,421:INFO:Set up data.
2024-06-06 15:00:21,428:INFO:Set up index.
2024-06-06 15:00:23,475:INFO:Initializing predict_model()
2024-06-06 15:00:23,475:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E10F5137D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E167CDC680>)
2024-06-06 15:00:23,476:INFO:Checking exceptions
2024-06-06 15:00:23,476:INFO:Preloading libraries
2024-06-06 15:00:23,476:INFO:Set up data.
2024-06-06 15:00:23,478:INFO:Set up index.
2024-06-06 15:00:25,549:INFO:Initializing predict_model()
2024-06-06 15:00:25,549:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E10F50A190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E10F2DACA0>)
2024-06-06 15:00:25,549:INFO:Checking exceptions
2024-06-06 15:00:25,549:INFO:Preloading libraries
2024-06-06 15:00:25,549:INFO:Set up data.
2024-06-06 15:00:25,554:INFO:Set up index.
2024-06-06 15:00:37,623:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 15:00:37,623:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 15:00:37,623:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 15:00:37,623:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 15:00:37,897:INFO:Initializing load_model()
2024-06-06 15:00:37,897:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-06 15:00:37,900:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 15:00:37,901:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 15:00:37,901:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 15:00:37,901:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 15:00:41,874:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 15:00:42,285:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-06 15:00:52,176:INFO:Initializing predict_model()
2024-06-06 15:00:52,176:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD539A7BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59F5B100>)
2024-06-06 15:00:52,176:INFO:Checking exceptions
2024-06-06 15:00:52,176:INFO:Preloading libraries
2024-06-06 15:00:52,182:INFO:Set up data.
2024-06-06 15:00:52,198:INFO:Set up index.
2024-06-06 15:00:54,293:INFO:Initializing predict_model()
2024-06-06 15:00:54,293:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54032F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDAB60>)
2024-06-06 15:00:54,293:INFO:Checking exceptions
2024-06-06 15:00:54,293:INFO:Preloading libraries
2024-06-06 15:00:54,294:INFO:Set up data.
2024-06-06 15:00:54,297:INFO:Set up index.
2024-06-06 15:00:56,355:INFO:Initializing predict_model()
2024-06-06 15:00:56,355:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD539A6510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDAAC0>)
2024-06-06 15:00:56,355:INFO:Checking exceptions
2024-06-06 15:00:56,355:INFO:Preloading libraries
2024-06-06 15:00:56,356:INFO:Set up data.
2024-06-06 15:00:56,357:INFO:Set up index.
2024-06-06 15:00:58,420:INFO:Initializing predict_model()
2024-06-06 15:00:58,420:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD5404B350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB240>)
2024-06-06 15:00:58,420:INFO:Checking exceptions
2024-06-06 15:00:58,421:INFO:Preloading libraries
2024-06-06 15:00:58,421:INFO:Set up data.
2024-06-06 15:00:58,431:INFO:Set up index.
2024-06-06 15:01:00,482:INFO:Initializing predict_model()
2024-06-06 15:01:00,482:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD5404AC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB2E0>)
2024-06-06 15:01:00,482:INFO:Checking exceptions
2024-06-06 15:01:00,482:INFO:Preloading libraries
2024-06-06 15:01:00,484:INFO:Set up data.
2024-06-06 15:01:00,486:INFO:Set up index.
2024-06-06 15:01:02,538:INFO:Initializing predict_model()
2024-06-06 15:01:02,538:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD53995190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDAB60>)
2024-06-06 15:01:02,538:INFO:Checking exceptions
2024-06-06 15:01:02,538:INFO:Preloading libraries
2024-06-06 15:01:02,539:INFO:Set up data.
2024-06-06 15:01:02,541:INFO:Set up index.
2024-06-06 15:01:04,857:INFO:Initializing predict_model()
2024-06-06 15:01:04,857:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54053B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB880>)
2024-06-06 15:01:04,857:INFO:Checking exceptions
2024-06-06 15:01:04,857:INFO:Preloading libraries
2024-06-06 15:01:04,858:INFO:Set up data.
2024-06-06 15:01:04,860:INFO:Set up index.
2024-06-06 15:01:06,916:INFO:Initializing predict_model()
2024-06-06 15:01:06,916:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD539A5050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD36FD5580>)
2024-06-06 15:01:06,916:INFO:Checking exceptions
2024-06-06 15:01:06,916:INFO:Preloading libraries
2024-06-06 15:01:06,916:INFO:Set up data.
2024-06-06 15:01:06,918:INFO:Set up index.
2024-06-06 15:01:08,977:INFO:Initializing predict_model()
2024-06-06 15:01:08,977:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD53978050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD52B028E0>)
2024-06-06 15:01:08,977:INFO:Checking exceptions
2024-06-06 15:01:08,977:INFO:Preloading libraries
2024-06-06 15:01:08,977:INFO:Set up data.
2024-06-06 15:01:08,979:INFO:Set up index.
2024-06-06 15:01:11,017:INFO:Initializing predict_model()
2024-06-06 15:01:11,017:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD539AC8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB880>)
2024-06-06 15:01:11,017:INFO:Checking exceptions
2024-06-06 15:01:11,017:INFO:Preloading libraries
2024-06-06 15:01:11,018:INFO:Set up data.
2024-06-06 15:01:11,019:INFO:Set up index.
2024-06-06 15:01:13,063:INFO:Initializing predict_model()
2024-06-06 15:01:13,063:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD540534D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD36FD5580>)
2024-06-06 15:01:13,063:INFO:Checking exceptions
2024-06-06 15:01:13,063:INFO:Preloading libraries
2024-06-06 15:01:13,063:INFO:Set up data.
2024-06-06 15:01:13,065:INFO:Set up index.
2024-06-06 15:01:25,167:INFO:Initializing predict_model()
2024-06-06 15:01:25,168:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD53994810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB7E0>)
2024-06-06 15:01:25,168:INFO:Checking exceptions
2024-06-06 15:01:25,168:INFO:Preloading libraries
2024-06-06 15:01:25,169:INFO:Set up data.
2024-06-06 15:01:25,171:INFO:Set up index.
2024-06-06 15:01:27,242:INFO:Initializing predict_model()
2024-06-06 15:01:27,243:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD5404BB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDADE0>)
2024-06-06 15:01:27,243:INFO:Checking exceptions
2024-06-06 15:01:27,243:INFO:Preloading libraries
2024-06-06 15:01:27,243:INFO:Set up data.
2024-06-06 15:01:27,245:INFO:Set up index.
2024-06-06 15:01:29,302:INFO:Initializing predict_model()
2024-06-06 15:01:29,302:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD540325D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB100>)
2024-06-06 15:01:29,302:INFO:Checking exceptions
2024-06-06 15:01:29,302:INFO:Preloading libraries
2024-06-06 15:01:29,302:INFO:Set up data.
2024-06-06 15:01:29,303:INFO:Set up index.
2024-06-06 15:01:31,366:INFO:Initializing predict_model()
2024-06-06 15:01:31,366:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54051ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB380>)
2024-06-06 15:01:31,366:INFO:Checking exceptions
2024-06-06 15:01:31,366:INFO:Preloading libraries
2024-06-06 15:01:31,366:INFO:Set up data.
2024-06-06 15:01:31,368:INFO:Set up index.
2024-06-06 15:01:33,433:INFO:Initializing predict_model()
2024-06-06 15:01:33,434:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD539AD710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59F5AF20>)
2024-06-06 15:01:33,434:INFO:Checking exceptions
2024-06-06 15:01:33,434:INFO:Preloading libraries
2024-06-06 15:01:33,434:INFO:Set up data.
2024-06-06 15:01:33,436:INFO:Set up index.
2024-06-06 15:01:35,493:INFO:Initializing predict_model()
2024-06-06 15:01:35,493:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54049890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB4C0>)
2024-06-06 15:01:35,493:INFO:Checking exceptions
2024-06-06 15:01:35,493:INFO:Preloading libraries
2024-06-06 15:01:35,493:INFO:Set up data.
2024-06-06 15:01:35,495:INFO:Set up index.
2024-06-06 15:01:37,550:INFO:Initializing predict_model()
2024-06-06 15:01:37,550:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54054B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB740>)
2024-06-06 15:01:37,550:INFO:Checking exceptions
2024-06-06 15:01:37,550:INFO:Preloading libraries
2024-06-06 15:01:37,550:INFO:Set up data.
2024-06-06 15:01:37,551:INFO:Set up index.
2024-06-06 15:01:39,612:INFO:Initializing predict_model()
2024-06-06 15:01:39,613:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD539A44D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD52B028E0>)
2024-06-06 15:01:39,613:INFO:Checking exceptions
2024-06-06 15:01:39,613:INFO:Preloading libraries
2024-06-06 15:01:39,613:INFO:Set up data.
2024-06-06 15:01:39,615:INFO:Set up index.
2024-06-06 15:01:41,673:INFO:Initializing predict_model()
2024-06-06 15:01:41,673:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54053790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDBB00>)
2024-06-06 15:01:41,673:INFO:Checking exceptions
2024-06-06 15:01:41,673:INFO:Preloading libraries
2024-06-06 15:01:41,673:INFO:Set up data.
2024-06-06 15:01:41,675:INFO:Set up index.
2024-06-06 15:01:43,739:INFO:Initializing predict_model()
2024-06-06 15:01:43,739:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD540534D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD1C2C2480>)
2024-06-06 15:01:43,739:INFO:Checking exceptions
2024-06-06 15:01:43,739:INFO:Preloading libraries
2024-06-06 15:01:43,740:INFO:Set up data.
2024-06-06 15:01:43,741:INFO:Set up index.
2024-06-06 15:01:45,797:INFO:Initializing predict_model()
2024-06-06 15:01:45,798:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD53994750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDACA0>)
2024-06-06 15:01:45,798:INFO:Checking exceptions
2024-06-06 15:01:45,798:INFO:Preloading libraries
2024-06-06 15:01:45,798:INFO:Set up data.
2024-06-06 15:01:45,800:INFO:Set up index.
2024-06-06 15:01:57,881:INFO:Initializing predict_model()
2024-06-06 15:01:57,881:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54055B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDAB60>)
2024-06-06 15:01:57,881:INFO:Checking exceptions
2024-06-06 15:01:57,881:INFO:Preloading libraries
2024-06-06 15:01:57,882:INFO:Set up data.
2024-06-06 15:01:57,883:INFO:Set up index.
2024-06-06 15:01:59,945:INFO:Initializing predict_model()
2024-06-06 15:01:59,945:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54052310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD52B02A20>)
2024-06-06 15:01:59,945:INFO:Checking exceptions
2024-06-06 15:01:59,945:INFO:Preloading libraries
2024-06-06 15:01:59,946:INFO:Set up data.
2024-06-06 15:01:59,947:INFO:Set up index.
2024-06-06 15:02:02,007:INFO:Initializing predict_model()
2024-06-06 15:02:02,007:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD539AD250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDAF20>)
2024-06-06 15:02:02,007:INFO:Checking exceptions
2024-06-06 15:02:02,007:INFO:Preloading libraries
2024-06-06 15:02:02,007:INFO:Set up data.
2024-06-06 15:02:02,010:INFO:Set up index.
2024-06-06 15:02:04,073:INFO:Initializing predict_model()
2024-06-06 15:02:04,073:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD539A7B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD1C2C2480>)
2024-06-06 15:02:04,073:INFO:Checking exceptions
2024-06-06 15:02:04,073:INFO:Preloading libraries
2024-06-06 15:02:04,073:INFO:Set up data.
2024-06-06 15:02:04,074:INFO:Set up index.
2024-06-06 15:02:06,131:INFO:Initializing predict_model()
2024-06-06 15:02:06,131:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD5404A950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDAA20>)
2024-06-06 15:02:06,131:INFO:Checking exceptions
2024-06-06 15:02:06,131:INFO:Preloading libraries
2024-06-06 15:02:06,132:INFO:Set up data.
2024-06-06 15:02:06,133:INFO:Set up index.
2024-06-06 15:02:08,183:INFO:Initializing predict_model()
2024-06-06 15:02:08,184:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54056890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB2E0>)
2024-06-06 15:02:08,184:INFO:Checking exceptions
2024-06-06 15:02:08,184:INFO:Preloading libraries
2024-06-06 15:02:08,184:INFO:Set up data.
2024-06-06 15:02:08,185:INFO:Set up index.
2024-06-06 15:02:10,250:INFO:Initializing predict_model()
2024-06-06 15:02:10,250:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD539A5DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD53876AC0>)
2024-06-06 15:02:10,250:INFO:Checking exceptions
2024-06-06 15:02:10,250:INFO:Preloading libraries
2024-06-06 15:02:10,250:INFO:Set up data.
2024-06-06 15:02:10,252:INFO:Set up index.
2024-06-06 15:02:12,312:INFO:Initializing predict_model()
2024-06-06 15:02:12,312:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54052910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB4C0>)
2024-06-06 15:02:12,312:INFO:Checking exceptions
2024-06-06 15:02:12,312:INFO:Preloading libraries
2024-06-06 15:02:12,312:INFO:Set up data.
2024-06-06 15:02:12,314:INFO:Set up index.
2024-06-06 15:02:14,385:INFO:Initializing predict_model()
2024-06-06 15:02:14,385:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54033790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD1B4E67A0>)
2024-06-06 15:02:14,385:INFO:Checking exceptions
2024-06-06 15:02:14,385:INFO:Preloading libraries
2024-06-06 15:02:14,385:INFO:Set up data.
2024-06-06 15:02:14,388:INFO:Set up index.
2024-06-06 15:02:16,437:INFO:Initializing predict_model()
2024-06-06 15:02:16,438:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD5397A6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDA7A0>)
2024-06-06 15:02:16,438:INFO:Checking exceptions
2024-06-06 15:02:16,438:INFO:Preloading libraries
2024-06-06 15:02:16,438:INFO:Set up data.
2024-06-06 15:02:16,440:INFO:Set up index.
2024-06-06 15:02:18,517:INFO:Initializing predict_model()
2024-06-06 15:02:18,517:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54057050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDA980>)
2024-06-06 15:02:18,517:INFO:Checking exceptions
2024-06-06 15:02:18,517:INFO:Preloading libraries
2024-06-06 15:02:18,518:INFO:Set up data.
2024-06-06 15:02:18,525:INFO:Set up index.
2024-06-06 15:02:23,248:INFO:Initializing predict_model()
2024-06-06 15:02:23,248:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD539AC110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD53269580>)
2024-06-06 15:02:23,248:INFO:Checking exceptions
2024-06-06 15:02:23,249:INFO:Preloading libraries
2024-06-06 15:02:23,249:INFO:Set up data.
2024-06-06 15:02:23,251:INFO:Set up index.
2024-06-06 15:02:25,314:INFO:Initializing predict_model()
2024-06-06 15:02:25,314:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54053F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB060>)
2024-06-06 15:02:25,314:INFO:Checking exceptions
2024-06-06 15:02:25,314:INFO:Preloading libraries
2024-06-06 15:02:25,314:INFO:Set up data.
2024-06-06 15:02:25,317:INFO:Set up index.
2024-06-06 15:02:27,371:INFO:Initializing predict_model()
2024-06-06 15:02:27,371:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54050C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD36BDC680>)
2024-06-06 15:02:27,372:INFO:Checking exceptions
2024-06-06 15:02:27,372:INFO:Preloading libraries
2024-06-06 15:02:27,372:INFO:Set up data.
2024-06-06 15:02:27,375:INFO:Set up index.
2024-06-06 15:02:29,437:INFO:Initializing predict_model()
2024-06-06 15:02:29,437:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD5404A9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB1A0>)
2024-06-06 15:02:29,438:INFO:Checking exceptions
2024-06-06 15:02:29,438:INFO:Preloading libraries
2024-06-06 15:02:29,438:INFO:Set up data.
2024-06-06 15:02:29,440:INFO:Set up index.
2024-06-06 15:02:31,506:INFO:Initializing predict_model()
2024-06-06 15:02:31,506:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54057B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDBB00>)
2024-06-06 15:02:31,506:INFO:Checking exceptions
2024-06-06 15:02:31,506:INFO:Preloading libraries
2024-06-06 15:02:31,506:INFO:Set up data.
2024-06-06 15:02:31,509:INFO:Set up index.
2024-06-06 15:02:33,569:INFO:Initializing predict_model()
2024-06-06 15:02:33,569:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54033790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD53269620>)
2024-06-06 15:02:33,569:INFO:Checking exceptions
2024-06-06 15:02:33,569:INFO:Preloading libraries
2024-06-06 15:02:33,569:INFO:Set up data.
2024-06-06 15:02:33,571:INFO:Set up index.
2024-06-06 15:02:35,616:INFO:Initializing predict_model()
2024-06-06 15:02:35,616:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD540503D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDA8E0>)
2024-06-06 15:02:35,616:INFO:Checking exceptions
2024-06-06 15:02:35,616:INFO:Preloading libraries
2024-06-06 15:02:35,616:INFO:Set up data.
2024-06-06 15:02:35,618:INFO:Set up index.
2024-06-06 15:02:37,681:INFO:Initializing predict_model()
2024-06-06 15:02:37,681:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54052110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD36BDC680>)
2024-06-06 15:02:37,681:INFO:Checking exceptions
2024-06-06 15:02:37,681:INFO:Preloading libraries
2024-06-06 15:02:37,681:INFO:Set up data.
2024-06-06 15:02:37,685:INFO:Set up index.
2024-06-06 15:02:39,743:INFO:Initializing predict_model()
2024-06-06 15:02:39,743:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54057590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB240>)
2024-06-06 15:02:39,743:INFO:Checking exceptions
2024-06-06 15:02:39,743:INFO:Preloading libraries
2024-06-06 15:02:39,743:INFO:Set up data.
2024-06-06 15:02:39,745:INFO:Set up index.
2024-06-06 15:02:41,814:INFO:Initializing predict_model()
2024-06-06 15:02:41,815:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54044410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDA840>)
2024-06-06 15:02:41,815:INFO:Checking exceptions
2024-06-06 15:02:41,815:INFO:Preloading libraries
2024-06-06 15:02:41,815:INFO:Set up data.
2024-06-06 15:02:41,817:INFO:Set up index.
2024-06-06 15:02:43,873:INFO:Initializing predict_model()
2024-06-06 15:02:43,873:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54055610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD53269580>)
2024-06-06 15:02:43,873:INFO:Checking exceptions
2024-06-06 15:02:43,873:INFO:Preloading libraries
2024-06-06 15:02:43,874:INFO:Set up data.
2024-06-06 15:02:43,876:INFO:Set up index.
2024-06-06 15:02:55,992:INFO:Initializing predict_model()
2024-06-06 15:02:55,992:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54052810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDACA0>)
2024-06-06 15:02:55,992:INFO:Checking exceptions
2024-06-06 15:02:55,993:INFO:Preloading libraries
2024-06-06 15:02:55,993:INFO:Set up data.
2024-06-06 15:02:55,995:INFO:Set up index.
2024-06-06 15:02:58,058:INFO:Initializing predict_model()
2024-06-06 15:02:58,059:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD539A4DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD1B72E660>)
2024-06-06 15:02:58,059:INFO:Checking exceptions
2024-06-06 15:02:58,059:INFO:Preloading libraries
2024-06-06 15:02:58,059:INFO:Set up data.
2024-06-06 15:02:58,061:INFO:Set up index.
2024-06-06 15:03:00,122:INFO:Initializing predict_model()
2024-06-06 15:03:00,122:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54056290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB100>)
2024-06-06 15:03:00,122:INFO:Checking exceptions
2024-06-06 15:03:00,122:INFO:Preloading libraries
2024-06-06 15:03:00,123:INFO:Set up data.
2024-06-06 15:03:00,126:INFO:Set up index.
2024-06-06 15:03:02,174:INFO:Initializing predict_model()
2024-06-06 15:03:02,174:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54044BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDAC00>)
2024-06-06 15:03:02,174:INFO:Checking exceptions
2024-06-06 15:03:02,174:INFO:Preloading libraries
2024-06-06 15:03:02,175:INFO:Set up data.
2024-06-06 15:03:02,177:INFO:Set up index.
2024-06-06 15:03:04,248:INFO:Initializing predict_model()
2024-06-06 15:03:04,248:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54054490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD53269620>)
2024-06-06 15:03:04,248:INFO:Checking exceptions
2024-06-06 15:03:04,248:INFO:Preloading libraries
2024-06-06 15:03:04,249:INFO:Set up data.
2024-06-06 15:03:04,252:INFO:Set up index.
2024-06-06 15:03:06,295:INFO:Initializing predict_model()
2024-06-06 15:03:06,295:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54052E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDA980>)
2024-06-06 15:03:06,295:INFO:Checking exceptions
2024-06-06 15:03:06,295:INFO:Preloading libraries
2024-06-06 15:03:06,295:INFO:Set up data.
2024-06-06 15:03:06,297:INFO:Set up index.
2024-06-06 15:03:08,357:INFO:Initializing predict_model()
2024-06-06 15:03:08,358:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD53983C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD1B72E660>)
2024-06-06 15:03:08,358:INFO:Checking exceptions
2024-06-06 15:03:08,358:INFO:Preloading libraries
2024-06-06 15:03:08,358:INFO:Set up data.
2024-06-06 15:03:08,360:INFO:Set up index.
2024-06-06 15:03:10,433:INFO:Initializing predict_model()
2024-06-06 15:03:10,433:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54055690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB9C0>)
2024-06-06 15:03:10,433:INFO:Checking exceptions
2024-06-06 15:03:10,433:INFO:Preloading libraries
2024-06-06 15:03:10,434:INFO:Set up data.
2024-06-06 15:03:10,436:INFO:Set up index.
2024-06-06 15:03:12,501:INFO:Initializing predict_model()
2024-06-06 15:03:12,501:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54045150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB7E0>)
2024-06-06 15:03:12,501:INFO:Checking exceptions
2024-06-06 15:03:12,501:INFO:Preloading libraries
2024-06-06 15:03:12,501:INFO:Set up data.
2024-06-06 15:03:12,505:INFO:Set up index.
2024-06-06 15:03:14,578:INFO:Initializing predict_model()
2024-06-06 15:03:14,578:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD540578D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD53269580>)
2024-06-06 15:03:14,578:INFO:Checking exceptions
2024-06-06 15:03:14,578:INFO:Preloading libraries
2024-06-06 15:03:14,578:INFO:Set up data.
2024-06-06 15:03:14,580:INFO:Set up index.
2024-06-06 15:03:16,639:INFO:Initializing predict_model()
2024-06-06 15:03:16,639:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD539A4310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDA7A0>)
2024-06-06 15:03:16,639:INFO:Checking exceptions
2024-06-06 15:03:16,639:INFO:Preloading libraries
2024-06-06 15:03:16,639:INFO:Set up data.
2024-06-06 15:03:16,642:INFO:Set up index.
2024-06-06 15:03:28,719:INFO:Initializing predict_model()
2024-06-06 15:03:28,719:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54057410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD53876AC0>)
2024-06-06 15:03:28,719:INFO:Checking exceptions
2024-06-06 15:03:28,719:INFO:Preloading libraries
2024-06-06 15:03:28,720:INFO:Set up data.
2024-06-06 15:03:28,723:INFO:Set up index.
2024-06-06 15:03:30,795:INFO:Initializing predict_model()
2024-06-06 15:03:30,795:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD53979010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDAD40>)
2024-06-06 15:03:30,795:INFO:Checking exceptions
2024-06-06 15:03:30,795:INFO:Preloading libraries
2024-06-06 15:03:30,795:INFO:Set up data.
2024-06-06 15:03:30,797:INFO:Set up index.
2024-06-06 15:03:32,862:INFO:Initializing predict_model()
2024-06-06 15:03:32,863:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54045810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDADE0>)
2024-06-06 15:03:32,863:INFO:Checking exceptions
2024-06-06 15:03:32,863:INFO:Preloading libraries
2024-06-06 15:03:32,863:INFO:Set up data.
2024-06-06 15:03:32,865:INFO:Set up index.
2024-06-06 15:03:34,940:INFO:Initializing predict_model()
2024-06-06 15:03:34,940:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54057390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD53269620>)
2024-06-06 15:03:34,940:INFO:Checking exceptions
2024-06-06 15:03:34,940:INFO:Preloading libraries
2024-06-06 15:03:34,941:INFO:Set up data.
2024-06-06 15:03:34,943:INFO:Set up index.
2024-06-06 15:03:37,016:INFO:Initializing predict_model()
2024-06-06 15:03:37,016:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54052050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB1A0>)
2024-06-06 15:03:37,016:INFO:Checking exceptions
2024-06-06 15:03:37,016:INFO:Preloading libraries
2024-06-06 15:03:37,017:INFO:Set up data.
2024-06-06 15:03:37,021:INFO:Set up index.
2024-06-06 15:03:39,074:INFO:Initializing predict_model()
2024-06-06 15:03:39,075:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54053F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD53876AC0>)
2024-06-06 15:03:39,075:INFO:Checking exceptions
2024-06-06 15:03:39,075:INFO:Preloading libraries
2024-06-06 15:03:39,075:INFO:Set up data.
2024-06-06 15:03:39,079:INFO:Set up index.
2024-06-06 15:03:41,157:INFO:Initializing predict_model()
2024-06-06 15:03:41,157:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54032ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB920>)
2024-06-06 15:03:41,157:INFO:Checking exceptions
2024-06-06 15:03:41,157:INFO:Preloading libraries
2024-06-06 15:03:41,158:INFO:Set up data.
2024-06-06 15:03:41,161:INFO:Set up index.
2024-06-06 15:03:43,764:INFO:Initializing predict_model()
2024-06-06 15:03:43,764:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54046150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB560>)
2024-06-06 15:03:43,765:INFO:Checking exceptions
2024-06-06 15:03:43,765:INFO:Preloading libraries
2024-06-06 15:03:43,765:INFO:Set up data.
2024-06-06 15:03:43,766:INFO:Set up index.
2024-06-06 15:04:49,283:INFO:Initializing predict_model()
2024-06-06 15:04:49,283:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54033550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD53269580>)
2024-06-06 15:04:49,283:INFO:Checking exceptions
2024-06-06 15:04:49,283:INFO:Preloading libraries
2024-06-06 15:04:49,286:INFO:Set up data.
2024-06-06 15:04:49,292:INFO:Set up index.
2024-06-06 15:04:51,360:INFO:Initializing predict_model()
2024-06-06 15:04:51,360:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54050FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB240>)
2024-06-06 15:04:51,360:INFO:Checking exceptions
2024-06-06 15:04:51,360:INFO:Preloading libraries
2024-06-06 15:04:51,360:INFO:Set up data.
2024-06-06 15:04:51,363:INFO:Set up index.
2024-06-06 15:04:53,423:INFO:Initializing predict_model()
2024-06-06 15:04:53,423:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD53995F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD1C2C2480>)
2024-06-06 15:04:53,423:INFO:Checking exceptions
2024-06-06 15:04:53,423:INFO:Preloading libraries
2024-06-06 15:04:53,424:INFO:Set up data.
2024-06-06 15:04:53,426:INFO:Set up index.
2024-06-06 15:04:55,492:INFO:Initializing predict_model()
2024-06-06 15:04:55,492:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD539AC2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB880>)
2024-06-06 15:04:55,492:INFO:Checking exceptions
2024-06-06 15:04:55,492:INFO:Preloading libraries
2024-06-06 15:04:55,492:INFO:Set up data.
2024-06-06 15:04:55,494:INFO:Set up index.
2024-06-06 15:04:57,553:INFO:Initializing predict_model()
2024-06-06 15:04:57,553:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54046550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB380>)
2024-06-06 15:04:57,553:INFO:Checking exceptions
2024-06-06 15:04:57,553:INFO:Preloading libraries
2024-06-06 15:04:57,553:INFO:Set up data.
2024-06-06 15:04:57,555:INFO:Set up index.
2024-06-06 15:04:59,615:INFO:Initializing predict_model()
2024-06-06 15:04:59,615:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD5404A890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD53269620>)
2024-06-06 15:04:59,615:INFO:Checking exceptions
2024-06-06 15:04:59,615:INFO:Preloading libraries
2024-06-06 15:04:59,616:INFO:Set up data.
2024-06-06 15:04:59,618:INFO:Set up index.
2024-06-06 15:05:01,668:INFO:Initializing predict_model()
2024-06-06 15:05:01,669:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD53996C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDAA20>)
2024-06-06 15:05:01,669:INFO:Checking exceptions
2024-06-06 15:05:01,669:INFO:Preloading libraries
2024-06-06 15:05:01,669:INFO:Set up data.
2024-06-06 15:05:01,671:INFO:Set up index.
2024-06-06 15:05:03,739:INFO:Initializing predict_model()
2024-06-06 15:05:03,739:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54056C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD1C2C2480>)
2024-06-06 15:05:03,739:INFO:Checking exceptions
2024-06-06 15:05:03,739:INFO:Preloading libraries
2024-06-06 15:05:03,739:INFO:Set up data.
2024-06-06 15:05:03,741:INFO:Set up index.
2024-06-06 15:05:05,808:INFO:Initializing predict_model()
2024-06-06 15:05:05,808:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD5336BA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB100>)
2024-06-06 15:05:05,808:INFO:Checking exceptions
2024-06-06 15:05:05,808:INFO:Preloading libraries
2024-06-06 15:05:05,809:INFO:Set up data.
2024-06-06 15:05:05,810:INFO:Set up index.
2024-06-06 15:05:07,868:INFO:Initializing predict_model()
2024-06-06 15:05:07,868:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54046B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDA7A0>)
2024-06-06 15:05:07,868:INFO:Checking exceptions
2024-06-06 15:05:07,868:INFO:Preloading libraries
2024-06-06 15:05:07,868:INFO:Set up data.
2024-06-06 15:05:07,870:INFO:Set up index.
2024-06-06 15:05:09,932:INFO:Initializing predict_model()
2024-06-06 15:05:09,932:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD5397AA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD53269580>)
2024-06-06 15:05:09,932:INFO:Checking exceptions
2024-06-06 15:05:09,932:INFO:Preloading libraries
2024-06-06 15:05:09,933:INFO:Set up data.
2024-06-06 15:05:09,934:INFO:Set up index.
2024-06-06 15:05:11,991:INFO:Initializing predict_model()
2024-06-06 15:05:11,991:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54050310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDBA60>)
2024-06-06 15:05:11,991:INFO:Checking exceptions
2024-06-06 15:05:11,991:INFO:Preloading libraries
2024-06-06 15:05:11,992:INFO:Set up data.
2024-06-06 15:05:11,994:INFO:Set up index.
2024-06-06 15:05:14,044:INFO:Initializing predict_model()
2024-06-06 15:05:14,044:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54033D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD1B72E660>)
2024-06-06 15:05:14,044:INFO:Checking exceptions
2024-06-06 15:05:14,044:INFO:Preloading libraries
2024-06-06 15:05:14,045:INFO:Set up data.
2024-06-06 15:05:14,047:INFO:Set up index.
2024-06-06 15:05:16,115:INFO:Initializing predict_model()
2024-06-06 15:05:16,115:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD53995990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDADE0>)
2024-06-06 15:05:16,115:INFO:Checking exceptions
2024-06-06 15:05:16,115:INFO:Preloading libraries
2024-06-06 15:05:16,116:INFO:Set up data.
2024-06-06 15:05:16,118:INFO:Set up index.
2024-06-06 15:05:18,182:INFO:Initializing predict_model()
2024-06-06 15:05:18,183:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54046750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDACA0>)
2024-06-06 15:05:18,183:INFO:Checking exceptions
2024-06-06 15:05:18,183:INFO:Preloading libraries
2024-06-06 15:05:18,183:INFO:Set up data.
2024-06-06 15:05:18,184:INFO:Set up index.
2024-06-06 15:05:20,242:INFO:Initializing predict_model()
2024-06-06 15:05:20,242:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD540490D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD53269620>)
2024-06-06 15:05:20,242:INFO:Checking exceptions
2024-06-06 15:05:20,242:INFO:Preloading libraries
2024-06-06 15:05:20,242:INFO:Set up data.
2024-06-06 15:05:20,244:INFO:Set up index.
2024-06-06 15:05:22,301:INFO:Initializing predict_model()
2024-06-06 15:05:22,301:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD540539D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDAB60>)
2024-06-06 15:05:22,301:INFO:Checking exceptions
2024-06-06 15:05:22,301:INFO:Preloading libraries
2024-06-06 15:05:22,301:INFO:Set up data.
2024-06-06 15:05:22,303:INFO:Set up index.
2024-06-06 15:05:24,370:INFO:Initializing predict_model()
2024-06-06 15:05:24,370:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54057950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD1B72E660>)
2024-06-06 15:05:24,370:INFO:Checking exceptions
2024-06-06 15:05:24,370:INFO:Preloading libraries
2024-06-06 15:05:24,371:INFO:Set up data.
2024-06-06 15:05:24,373:INFO:Set up index.
2024-06-06 15:05:26,430:INFO:Initializing predict_model()
2024-06-06 15:05:26,430:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD539AD950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDB920>)
2024-06-06 15:05:26,430:INFO:Checking exceptions
2024-06-06 15:05:26,430:INFO:Preloading libraries
2024-06-06 15:05:26,431:INFO:Set up data.
2024-06-06 15:05:26,434:INFO:Set up index.
2024-06-06 15:05:38,579:INFO:Initializing predict_model()
2024-06-06 15:05:38,579:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FD54047690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FD59FDA980>)
2024-06-06 15:05:38,579:INFO:Checking exceptions
2024-06-06 15:05:38,579:INFO:Preloading libraries
2024-06-06 15:05:38,580:INFO:Set up data.
2024-06-06 15:05:38,582:INFO:Set up index.
2024-06-06 15:08:21,337:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 15:08:21,337:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 15:08:21,337:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 15:08:21,338:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 15:08:21,600:INFO:Initializing load_model()
2024-06-06 15:08:21,600:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-06 15:08:21,603:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 15:08:21,604:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 15:08:21,605:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 15:08:21,605:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 15:08:26,276:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 15:08:26,807:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-06 15:08:42,146:INFO:Initializing predict_model()
2024-06-06 15:08:42,146:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023358FA7D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FA5B100>)
2024-06-06 15:08:42,147:INFO:Checking exceptions
2024-06-06 15:08:42,147:INFO:Preloading libraries
2024-06-06 15:08:42,154:INFO:Set up data.
2024-06-06 15:08:42,189:INFO:Set up index.
2024-06-06 15:08:44,251:INFO:Initializing predict_model()
2024-06-06 15:08:44,251:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000233593E6D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADAB60>)
2024-06-06 15:08:44,251:INFO:Checking exceptions
2024-06-06 15:08:44,251:INFO:Preloading libraries
2024-06-06 15:08:44,251:INFO:Set up data.
2024-06-06 15:08:44,254:INFO:Set up index.
2024-06-06 15:08:46,309:INFO:Initializing predict_model()
2024-06-06 15:08:46,309:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002335FA17050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADAC00>)
2024-06-06 15:08:46,309:INFO:Checking exceptions
2024-06-06 15:08:46,309:INFO:Preloading libraries
2024-06-06 15:08:46,309:INFO:Set up data.
2024-06-06 15:08:46,311:INFO:Set up index.
2024-06-06 15:08:48,374:INFO:Initializing predict_model()
2024-06-06 15:08:48,374:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000233593FB010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADB240>)
2024-06-06 15:08:48,374:INFO:Checking exceptions
2024-06-06 15:08:48,374:INFO:Preloading libraries
2024-06-06 15:08:48,375:INFO:Set up data.
2024-06-06 15:08:48,391:INFO:Set up index.
2024-06-06 15:08:50,455:INFO:Initializing predict_model()
2024-06-06 15:08:50,455:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000233593FA190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADB2E0>)
2024-06-06 15:08:50,455:INFO:Checking exceptions
2024-06-06 15:08:50,455:INFO:Preloading libraries
2024-06-06 15:08:50,456:INFO:Set up data.
2024-06-06 15:08:50,457:INFO:Set up index.
2024-06-06 15:08:52,524:INFO:Initializing predict_model()
2024-06-06 15:08:52,525:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023358FACDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADAB60>)
2024-06-06 15:08:52,525:INFO:Checking exceptions
2024-06-06 15:08:52,525:INFO:Preloading libraries
2024-06-06 15:08:52,526:INFO:Set up data.
2024-06-06 15:08:52,528:INFO:Set up index.
2024-06-06 15:08:55,056:INFO:Initializing predict_model()
2024-06-06 15:08:55,056:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023359403950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADB880>)
2024-06-06 15:08:55,056:INFO:Checking exceptions
2024-06-06 15:08:55,056:INFO:Preloading libraries
2024-06-06 15:08:55,057:INFO:Set up data.
2024-06-06 15:08:55,060:INFO:Set up index.
2024-06-06 15:08:57,114:INFO:Initializing predict_model()
2024-06-06 15:08:57,114:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002335FA41B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002333C2D5580>)
2024-06-06 15:08:57,114:INFO:Checking exceptions
2024-06-06 15:08:57,114:INFO:Preloading libraries
2024-06-06 15:08:57,114:INFO:Set up data.
2024-06-06 15:08:57,116:INFO:Set up index.
2024-06-06 15:08:59,162:INFO:Initializing predict_model()
2024-06-06 15:08:59,162:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002335FA40BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000233581028E0>)
2024-06-06 15:08:59,162:INFO:Checking exceptions
2024-06-06 15:08:59,162:INFO:Preloading libraries
2024-06-06 15:08:59,162:INFO:Set up data.
2024-06-06 15:08:59,164:INFO:Set up index.
2024-06-06 15:09:01,230:INFO:Initializing predict_model()
2024-06-06 15:09:01,230:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000233593F8E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADB880>)
2024-06-06 15:09:01,230:INFO:Checking exceptions
2024-06-06 15:09:01,230:INFO:Preloading libraries
2024-06-06 15:09:01,230:INFO:Set up data.
2024-06-06 15:09:01,232:INFO:Set up index.
2024-06-06 15:09:03,299:INFO:Initializing predict_model()
2024-06-06 15:09:03,299:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023358FA5750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002333C2D5580>)
2024-06-06 15:09:03,299:INFO:Checking exceptions
2024-06-06 15:09:03,299:INFO:Preloading libraries
2024-06-06 15:09:03,299:INFO:Set up data.
2024-06-06 15:09:03,301:INFO:Set up index.
2024-06-06 15:09:15,397:INFO:Initializing predict_model()
2024-06-06 15:09:15,398:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000233593F89D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADB7E0>)
2024-06-06 15:09:15,398:INFO:Checking exceptions
2024-06-06 15:09:15,398:INFO:Preloading libraries
2024-06-06 15:09:15,399:INFO:Set up data.
2024-06-06 15:09:15,402:INFO:Set up index.
2024-06-06 15:09:17,469:INFO:Initializing predict_model()
2024-06-06 15:09:17,469:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023359401310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADB100>)
2024-06-06 15:09:17,469:INFO:Checking exceptions
2024-06-06 15:09:17,469:INFO:Preloading libraries
2024-06-06 15:09:17,469:INFO:Set up data.
2024-06-06 15:09:17,471:INFO:Set up index.
2024-06-06 15:09:19,532:INFO:Initializing predict_model()
2024-06-06 15:09:19,532:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023358F812D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADBBA0>)
2024-06-06 15:09:19,532:INFO:Checking exceptions
2024-06-06 15:09:19,532:INFO:Preloading libraries
2024-06-06 15:09:19,532:INFO:Set up data.
2024-06-06 15:09:19,535:INFO:Set up index.
2024-06-06 15:11:44,421:INFO:Initializing predict_model()
2024-06-06 15:11:44,422:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000233593F9C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADB920>)
2024-06-06 15:11:44,422:INFO:Checking exceptions
2024-06-06 15:11:44,422:INFO:Preloading libraries
2024-06-06 15:11:44,431:INFO:Set up data.
2024-06-06 15:11:44,448:INFO:Set up index.
2024-06-06 15:12:15,641:INFO:Initializing predict_model()
2024-06-06 15:12:15,641:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000233593E6ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FA5AD40>)
2024-06-06 15:12:15,641:INFO:Checking exceptions
2024-06-06 15:12:15,641:INFO:Preloading libraries
2024-06-06 15:12:15,641:INFO:Set up data.
2024-06-06 15:12:15,646:INFO:Set up index.
2024-06-06 15:16:15,622:INFO:Initializing predict_model()
2024-06-06 15:16:15,623:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023358FAC5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADBBA0>)
2024-06-06 15:16:15,623:INFO:Checking exceptions
2024-06-06 15:16:15,623:INFO:Preloading libraries
2024-06-06 15:16:15,626:INFO:Set up data.
2024-06-06 15:16:15,634:INFO:Set up index.
2024-06-06 15:16:17,704:INFO:Initializing predict_model()
2024-06-06 15:16:17,704:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023359402210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADB1A0>)
2024-06-06 15:16:17,704:INFO:Checking exceptions
2024-06-06 15:16:17,704:INFO:Preloading libraries
2024-06-06 15:16:17,705:INFO:Set up data.
2024-06-06 15:16:17,708:INFO:Set up index.
2024-06-06 15:16:19,747:INFO:Initializing predict_model()
2024-06-06 15:16:19,747:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023359401450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002333C2D5580>)
2024-06-06 15:16:19,747:INFO:Checking exceptions
2024-06-06 15:16:19,747:INFO:Preloading libraries
2024-06-06 15:16:19,747:INFO:Set up data.
2024-06-06 15:16:19,750:INFO:Set up index.
2024-06-06 15:16:21,810:INFO:Initializing predict_model()
2024-06-06 15:16:21,810:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000233593F98D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADB100>)
2024-06-06 15:16:21,810:INFO:Checking exceptions
2024-06-06 15:16:21,810:INFO:Preloading libraries
2024-06-06 15:16:21,811:INFO:Set up data.
2024-06-06 15:16:21,814:INFO:Set up index.
2024-06-06 15:22:36,629:INFO:Initializing predict_model()
2024-06-06 15:22:36,630:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023358F96ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000233215C2480>)
2024-06-06 15:22:36,630:INFO:Checking exceptions
2024-06-06 15:22:36,630:INFO:Preloading libraries
2024-06-06 15:22:36,635:INFO:Set up data.
2024-06-06 15:22:36,646:INFO:Set up index.
2024-06-06 15:22:38,734:INFO:Initializing predict_model()
2024-06-06 15:22:38,734:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023358FACE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADADE0>)
2024-06-06 15:22:38,734:INFO:Checking exceptions
2024-06-06 15:22:38,734:INFO:Preloading libraries
2024-06-06 15:22:38,734:INFO:Set up data.
2024-06-06 15:22:38,737:INFO:Set up index.
2024-06-06 15:22:40,795:INFO:Initializing predict_model()
2024-06-06 15:22:40,795:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023358FACC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023358E76AC0>)
2024-06-06 15:22:40,795:INFO:Checking exceptions
2024-06-06 15:22:40,795:INFO:Preloading libraries
2024-06-06 15:22:40,796:INFO:Set up data.
2024-06-06 15:22:40,799:INFO:Set up index.
2024-06-06 15:22:42,858:INFO:Initializing predict_model()
2024-06-06 15:22:42,858:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000233593FB8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADB240>)
2024-06-06 15:22:42,858:INFO:Checking exceptions
2024-06-06 15:22:42,858:INFO:Preloading libraries
2024-06-06 15:22:42,858:INFO:Set up data.
2024-06-06 15:22:42,861:INFO:Set up index.
2024-06-06 15:22:44,924:INFO:Initializing predict_model()
2024-06-06 15:22:44,924:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023359405F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADB7E0>)
2024-06-06 15:22:44,924:INFO:Checking exceptions
2024-06-06 15:22:44,924:INFO:Preloading libraries
2024-06-06 15:22:44,925:INFO:Set up data.
2024-06-06 15:22:44,926:INFO:Set up index.
2024-06-06 15:22:46,991:INFO:Initializing predict_model()
2024-06-06 15:22:46,991:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000233593F9410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FA5AD40>)
2024-06-06 15:22:46,991:INFO:Checking exceptions
2024-06-06 15:22:46,991:INFO:Preloading libraries
2024-06-06 15:22:46,991:INFO:Set up data.
2024-06-06 15:22:46,993:INFO:Set up index.
2024-06-06 15:22:49,054:INFO:Initializing predict_model()
2024-06-06 15:22:49,054:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023359402190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADB100>)
2024-06-06 15:22:49,054:INFO:Checking exceptions
2024-06-06 15:22:49,054:INFO:Preloading libraries
2024-06-06 15:22:49,054:INFO:Set up data.
2024-06-06 15:22:49,056:INFO:Set up index.
2024-06-06 15:22:51,121:INFO:Initializing predict_model()
2024-06-06 15:22:51,121:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023358FA5C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023358669620>)
2024-06-06 15:22:51,121:INFO:Checking exceptions
2024-06-06 15:22:51,121:INFO:Preloading libraries
2024-06-06 15:22:51,122:INFO:Set up data.
2024-06-06 15:22:51,123:INFO:Set up index.
2024-06-06 15:22:53,176:INFO:Initializing predict_model()
2024-06-06 15:22:53,176:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000233593FB510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADB1A0>)
2024-06-06 15:22:53,176:INFO:Checking exceptions
2024-06-06 15:22:53,176:INFO:Preloading libraries
2024-06-06 15:22:53,176:INFO:Set up data.
2024-06-06 15:22:53,178:INFO:Set up index.
2024-06-06 15:24:19,529:INFO:Initializing predict_model()
2024-06-06 15:24:19,529:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023358F96450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000233215C2480>)
2024-06-06 15:24:19,529:INFO:Checking exceptions
2024-06-06 15:24:19,529:INFO:Preloading libraries
2024-06-06 15:24:19,530:INFO:Set up data.
2024-06-06 15:24:19,534:INFO:Set up index.
2024-06-06 15:24:21,578:INFO:Initializing predict_model()
2024-06-06 15:24:21,578:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023358FAE650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADAB60>)
2024-06-06 15:24:21,578:INFO:Checking exceptions
2024-06-06 15:24:21,578:INFO:Preloading libraries
2024-06-06 15:24:21,578:INFO:Set up data.
2024-06-06 15:24:21,580:INFO:Set up index.
2024-06-06 15:24:23,635:INFO:Initializing predict_model()
2024-06-06 15:24:23,635:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023359407010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADAFC0>)
2024-06-06 15:24:23,635:INFO:Checking exceptions
2024-06-06 15:24:23,635:INFO:Preloading libraries
2024-06-06 15:24:23,635:INFO:Set up data.
2024-06-06 15:24:23,637:INFO:Set up index.
2024-06-06 15:24:25,703:INFO:Initializing predict_model()
2024-06-06 15:24:25,703:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023358F96710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023358102A20>)
2024-06-06 15:24:25,703:INFO:Checking exceptions
2024-06-06 15:24:25,703:INFO:Preloading libraries
2024-06-06 15:24:25,703:INFO:Set up data.
2024-06-06 15:24:25,705:INFO:Set up index.
2024-06-06 15:24:27,765:INFO:Initializing predict_model()
2024-06-06 15:24:27,765:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023359400690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADB100>)
2024-06-06 15:24:27,765:INFO:Checking exceptions
2024-06-06 15:24:27,765:INFO:Preloading libraries
2024-06-06 15:24:27,766:INFO:Set up data.
2024-06-06 15:24:27,769:INFO:Set up index.
2024-06-06 15:24:29,831:INFO:Initializing predict_model()
2024-06-06 15:24:29,831:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023358F97B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023358E76AC0>)
2024-06-06 15:24:29,831:INFO:Checking exceptions
2024-06-06 15:24:29,831:INFO:Preloading libraries
2024-06-06 15:24:29,833:INFO:Set up data.
2024-06-06 15:24:29,835:INFO:Set up index.
2024-06-06 15:24:31,902:INFO:Initializing predict_model()
2024-06-06 15:24:31,902:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023358FAE650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADA8E0>)
2024-06-06 15:24:31,903:INFO:Checking exceptions
2024-06-06 15:24:31,903:INFO:Preloading libraries
2024-06-06 15:24:31,906:INFO:Set up data.
2024-06-06 15:24:31,908:INFO:Set up index.
2024-06-06 15:24:33,971:INFO:Initializing predict_model()
2024-06-06 15:24:33,971:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023358FADA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000233208667A0>)
2024-06-06 15:24:33,972:INFO:Checking exceptions
2024-06-06 15:24:33,972:INFO:Preloading libraries
2024-06-06 15:24:33,973:INFO:Set up data.
2024-06-06 15:24:33,973:INFO:Set up index.
2024-06-06 15:24:36,020:INFO:Initializing predict_model()
2024-06-06 15:24:36,020:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002335FA41B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADADE0>)
2024-06-06 15:24:36,020:INFO:Checking exceptions
2024-06-06 15:24:36,020:INFO:Preloading libraries
2024-06-06 15:24:36,020:INFO:Set up data.
2024-06-06 15:24:36,022:INFO:Set up index.
2024-06-06 15:24:38,084:INFO:Initializing predict_model()
2024-06-06 15:24:38,084:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023359407A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADB6A0>)
2024-06-06 15:24:38,084:INFO:Checking exceptions
2024-06-06 15:24:38,084:INFO:Preloading libraries
2024-06-06 15:24:38,084:INFO:Set up data.
2024-06-06 15:24:38,086:INFO:Set up index.
2024-06-06 15:26:56,664:INFO:Initializing predict_model()
2024-06-06 15:26:56,664:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000233593FAB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002333BEDC680>)
2024-06-06 15:26:56,664:INFO:Checking exceptions
2024-06-06 15:26:56,664:INFO:Preloading libraries
2024-06-06 15:26:56,665:INFO:Set up data.
2024-06-06 15:26:56,667:INFO:Set up index.
2024-06-06 15:26:58,711:INFO:Initializing predict_model()
2024-06-06 15:26:58,712:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000233594077D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADB4C0>)
2024-06-06 15:26:58,712:INFO:Checking exceptions
2024-06-06 15:26:58,712:INFO:Preloading libraries
2024-06-06 15:26:58,712:INFO:Set up data.
2024-06-06 15:26:58,714:INFO:Set up index.
2024-06-06 15:27:00,784:INFO:Initializing predict_model()
2024-06-06 15:27:00,785:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023358F95D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023358669580>)
2024-06-06 15:27:00,785:INFO:Checking exceptions
2024-06-06 15:27:00,785:INFO:Preloading libraries
2024-06-06 15:27:00,785:INFO:Set up data.
2024-06-06 15:27:00,788:INFO:Set up index.
2024-06-06 15:27:02,830:INFO:Initializing predict_model()
2024-06-06 15:27:02,830:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000233593FB610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADB240>)
2024-06-06 15:27:02,830:INFO:Checking exceptions
2024-06-06 15:27:02,830:INFO:Preloading libraries
2024-06-06 15:27:02,830:INFO:Set up data.
2024-06-06 15:27:02,832:INFO:Set up index.
2024-06-06 15:27:04,886:INFO:Initializing predict_model()
2024-06-06 15:27:04,887:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000233593E75D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002333BEDC680>)
2024-06-06 15:27:04,887:INFO:Checking exceptions
2024-06-06 15:27:04,887:INFO:Preloading libraries
2024-06-06 15:27:04,887:INFO:Set up data.
2024-06-06 15:27:04,888:INFO:Set up index.
2024-06-06 15:27:06,945:INFO:Initializing predict_model()
2024-06-06 15:27:06,945:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023359406810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002335FADAC00>)
2024-06-06 15:27:06,946:INFO:Checking exceptions
2024-06-06 15:27:06,946:INFO:Preloading libraries
2024-06-06 15:27:06,946:INFO:Set up data.
2024-06-06 15:27:06,948:INFO:Set up index.
2024-06-06 15:31:16,880:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 15:31:16,880:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 15:31:16,880:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 15:31:16,881:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 15:31:17,214:INFO:Initializing load_model()
2024-06-06 15:31:17,214:INFO:load_model(model_name=API\modelo_navegacao_otimizado, platform=None, authentication=None, verbose=True)
2024-06-06 15:31:17,227:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SimpleImputer from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 15:31:17,227:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 15:31:17,228:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator PCA from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 15:31:17,228:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreeRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 15:31:21,316:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\sklearn\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator ExtraTreesRegressor from version 1.4.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2024-06-06 15:31:21,982:WARNING:C:\Users\pytho\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\pycaret\internal\pipeline.py:146: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '24.0', 'setuptools': '65.5.0', 'pycaret': '3.3.0', 'IPython': '8.22.2', 'ipywidgets': '8.1.2', 'tqdm': '4.66.2', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.3', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.1.post1', 'pyod': '1.1.3', 'imblearn': '0.12.2', 'category_encoders': '2.6.3', 'lightgbm': '4.3.0', 'numba': '0.59.1', 'requests': '2.31.0', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.20.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.27.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.8', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.9', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.3.2', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.4', 'numpy': '1.25.2', 'pandas': '2.0.3', 'jinja2': '3.1.4', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.0', 'imblearn': '0.12.3', 'category_encoders': '2.6.3', 'lightgbm': '4.1.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.2', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.5', 'markupsafe': '2.1.5', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': '3.1.0'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2024-06-06 15:31:31,584:INFO:Initializing predict_model()
2024-06-06 15:31:31,584:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002D88B2A7C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002D88B35B100>)
2024-06-06 15:31:31,584:INFO:Checking exceptions
2024-06-06 15:31:31,584:INFO:Preloading libraries
2024-06-06 15:31:31,597:INFO:Set up data.
2024-06-06 15:31:31,625:INFO:Set up index.
2024-06-06 15:31:33,709:INFO:Initializing predict_model()
2024-06-06 15:31:33,709:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002D88BAE6B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002D88B3DAB60>)
2024-06-06 15:31:33,709:INFO:Checking exceptions
2024-06-06 15:31:33,709:INFO:Preloading libraries
2024-06-06 15:31:33,709:INFO:Set up data.
2024-06-06 15:31:33,714:INFO:Set up index.
2024-06-06 15:31:35,780:INFO:Initializing predict_model()
2024-06-06 15:31:35,781:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002D88AA7C190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002D88B3DAC00>)
2024-06-06 15:31:35,781:INFO:Checking exceptions
2024-06-06 15:31:35,781:INFO:Preloading libraries
2024-06-06 15:31:35,781:INFO:Set up data.
2024-06-06 15:31:35,785:INFO:Set up index.
2024-06-06 15:31:37,844:INFO:Initializing predict_model()
2024-06-06 15:31:37,844:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002D88BAFB110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002D88B3DB240>)
2024-06-06 15:31:37,844:INFO:Checking exceptions
2024-06-06 15:31:37,844:INFO:Preloading libraries
2024-06-06 15:31:37,845:INFO:Set up data.
2024-06-06 15:31:37,865:INFO:Set up index.
2024-06-06 15:31:39,934:INFO:Initializing predict_model()
2024-06-06 15:31:39,934:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002D88BAFAA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002D88B3DB2E0>)
2024-06-06 15:31:39,934:INFO:Checking exceptions
2024-06-06 15:31:39,934:INFO:Preloading libraries
2024-06-06 15:31:39,935:INFO:Set up data.
2024-06-06 15:31:39,937:INFO:Set up index.
2024-06-06 15:31:42,000:INFO:Initializing predict_model()
2024-06-06 15:31:42,000:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002D88B2ACBD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['vgs', 'ugs', 'year_sin',
                                             'year_cos', 'month_sin',
                                             'month_cos', 'day_sin', 'day_cos',
                                             'lat_lon', 'vgs_ugs'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('pca',
                 TransformerWrapper(exclude=[],
                                    transformer=PCA(n_components=0.95))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002D88B3DAB60>)
2024-06-06 15:31:42,001:INFO:Checking exceptions
2024-06-06 15:31:42,001:INFO:Preloading libraries
2024-06-06 15:31:42,001:INFO:Set up data.
2024-06-06 15:31:42,003:INFO:Set up index.
